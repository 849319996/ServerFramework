// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=null.  DO NOT EDIT!
#pragma warning disable
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace org.zhangqi.proto {
  
  public static partial class BaseBattle {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static BaseBattle() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Enums
  public enum EventTypeEnum {
    EventTypeGameOver = 1,
    EventTypeStartTurn = 2,
    EventTypeEndTurn = 3,
    EventTypePlacePieces = 4,
  }
  
  public enum GameOverReasonEnum {
    GameOverPlayerWin = 1,
    GameOverPlayerConcede = 2,
    GameOverDraw = 3,
  }
  
  #endregion
  
  #region Messages
  public sealed partial class BattleInfo : pb::GeneratedMessageLite<BattleInfo, BattleInfo.Builder> {
    private BattleInfo() { }
    private static readonly BattleInfo defaultInstance = new BattleInfo().MakeReadOnly();
    private static readonly string[] _battleInfoFieldNames = new string[] { "battleCellInfo", "battleStartTimestamp", "currentTurnInfo", "lastEventNum", "notReadyUserIds", "userBriefInfos" };
    private static readonly uint[] _battleInfoFieldTags = new uint[] { 24, 32, 18, 48, 40, 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override BattleInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BattleInfo ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UserBriefInfosFieldNumber = 1;
    private pbc::PopsicleList<global::org.zhangqi.proto.UserBriefInfo> userBriefInfos_ = new pbc::PopsicleList<global::org.zhangqi.proto.UserBriefInfo>();
    public scg::IList<global::org.zhangqi.proto.UserBriefInfo> UserBriefInfosList {
      get { return userBriefInfos_; }
    }
    public int UserBriefInfosCount {
      get { return userBriefInfos_.Count; }
    }
    public global::org.zhangqi.proto.UserBriefInfo GetUserBriefInfos(int index) {
      return userBriefInfos_[index];
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int CurrentTurnInfoFieldNumber = 2;
    private bool hasCurrentTurnInfo;
    private global::org.zhangqi.proto.CurrentTurnInfo currentTurnInfo_;
    public bool HasCurrentTurnInfo {
      get { return hasCurrentTurnInfo; }
    }
    public global::org.zhangqi.proto.CurrentTurnInfo CurrentTurnInfo {
      get { return currentTurnInfo_ ?? global::org.zhangqi.proto.CurrentTurnInfo.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BattleCellInfoFieldNumber = 3;
    private pbc::PopsicleList<int> battleCellInfo_ = new pbc::PopsicleList<int>();
    public scg::IList<int> BattleCellInfoList {
      get { return pbc::Lists.AsReadOnly(battleCellInfo_); }
    }
    public int BattleCellInfoCount {
      get { return battleCellInfo_.Count; }
    }
    public int GetBattleCellInfo(int index) {
      return battleCellInfo_[index];
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BattleStartTimestampFieldNumber = 4;
    private bool hasBattleStartTimestamp;
    private long battleStartTimestamp_;
    public bool HasBattleStartTimestamp {
      get { return hasBattleStartTimestamp; }
    }
    public long BattleStartTimestamp {
      get { return battleStartTimestamp_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int NotReadyUserIdsFieldNumber = 5;
    private pbc::PopsicleList<int> notReadyUserIds_ = new pbc::PopsicleList<int>();
    public scg::IList<int> NotReadyUserIdsList {
      get { return pbc::Lists.AsReadOnly(notReadyUserIds_); }
    }
    public int NotReadyUserIdsCount {
      get { return notReadyUserIds_.Count; }
    }
    public int GetNotReadyUserIds(int index) {
      return notReadyUserIds_[index];
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int LastEventNumFieldNumber = 6;
    private bool hasLastEventNum;
    private int lastEventNum_;
    public bool HasLastEventNum {
      get { return hasLastEventNum; }
    }
    public int LastEventNum {
      get { return lastEventNum_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _battleInfoFieldNames;
      if (userBriefInfos_.Count > 0) {
        output.WriteMessageArray(1, field_names[5], userBriefInfos_);
      }
      if (hasCurrentTurnInfo) {
        output.WriteMessage(2, field_names[2], CurrentTurnInfo);
      }
      if (battleCellInfo_.Count > 0) {
        output.WriteInt32Array(3, field_names[0], battleCellInfo_);
      }
      if (hasBattleStartTimestamp) {
        output.WriteInt64(4, field_names[1], BattleStartTimestamp);
      }
      if (notReadyUserIds_.Count > 0) {
        output.WriteInt32Array(5, field_names[4], notReadyUserIds_);
      }
      if (hasLastEventNum) {
        output.WriteInt32(6, field_names[3], LastEventNum);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::org.zhangqi.proto.UserBriefInfo element in UserBriefInfosList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        if (hasCurrentTurnInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(2, CurrentTurnInfo);
        }
        {
          int dataSize = 0;
          foreach (int element in BattleCellInfoList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * battleCellInfo_.Count;
        }
        if (hasBattleStartTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(4, BattleStartTimestamp);
        }
        {
          int dataSize = 0;
          foreach (int element in NotReadyUserIdsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * notReadyUserIds_.Count;
        }
        if (hasLastEventNum) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, LastEventNum);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::org.zhangqi.proto.UserBriefInfo i in userBriefInfos_)
        hash ^= i.GetHashCode();
      if (hasCurrentTurnInfo) hash ^= currentTurnInfo_.GetHashCode();
      foreach(int i in battleCellInfo_)
        hash ^= i.GetHashCode();
      if (hasBattleStartTimestamp) hash ^= battleStartTimestamp_.GetHashCode();
      foreach(int i in notReadyUserIds_)
        hash ^= i.GetHashCode();
      if (hasLastEventNum) hash ^= lastEventNum_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      BattleInfo other = obj as BattleInfo;
      if (other == null) return false;
      if(userBriefInfos_.Count != other.userBriefInfos_.Count) return false;
      for(int ix=0; ix < userBriefInfos_.Count; ix++)
        if(!userBriefInfos_[ix].Equals(other.userBriefInfos_[ix])) return false;
      if (hasCurrentTurnInfo != other.hasCurrentTurnInfo || (hasCurrentTurnInfo && !currentTurnInfo_.Equals(other.currentTurnInfo_))) return false;
      if(battleCellInfo_.Count != other.battleCellInfo_.Count) return false;
      for(int ix=0; ix < battleCellInfo_.Count; ix++)
        if(!battleCellInfo_[ix].Equals(other.battleCellInfo_[ix])) return false;
      if (hasBattleStartTimestamp != other.hasBattleStartTimestamp || (hasBattleStartTimestamp && !battleStartTimestamp_.Equals(other.battleStartTimestamp_))) return false;
      if(notReadyUserIds_.Count != other.notReadyUserIds_.Count) return false;
      for(int ix=0; ix < notReadyUserIds_.Count; ix++)
        if(!notReadyUserIds_[ix].Equals(other.notReadyUserIds_[ix])) return false;
      if (hasLastEventNum != other.hasLastEventNum || (hasLastEventNum && !lastEventNum_.Equals(other.lastEventNum_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BattleInfo MakeReadOnly() {
      userBriefInfos_.MakeReadOnly();
      battleCellInfo_.MakeReadOnly();
      notReadyUserIds_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(BattleInfo prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<BattleInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BattleInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BattleInfo result;
      
      private BattleInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          BattleInfo original = result;
          result = new BattleInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BattleInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override BattleInfo DefaultInstanceForType {
        get { return global::org.zhangqi.proto.BattleInfo.DefaultInstance; }
      }
      
      public override BattleInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is BattleInfo) {
          return MergeFrom((BattleInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BattleInfo other) {
        if (other == global::org.zhangqi.proto.BattleInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.userBriefInfos_.Count != 0) {
          result.userBriefInfos_.Add(other.userBriefInfos_);
        }
        if (other.HasCurrentTurnInfo) {
          MergeCurrentTurnInfo(other.CurrentTurnInfo);
        }
        if (other.battleCellInfo_.Count != 0) {
          result.battleCellInfo_.Add(other.battleCellInfo_);
        }
        if (other.HasBattleStartTimestamp) {
          BattleStartTimestamp = other.BattleStartTimestamp;
        }
        if (other.notReadyUserIds_.Count != 0) {
          result.notReadyUserIds_.Add(other.notReadyUserIds_);
        }
        if (other.HasLastEventNum) {
          LastEventNum = other.LastEventNum;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_battleInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _battleInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.userBriefInfos_, global::org.zhangqi.proto.UserBriefInfo.DefaultInstance, extensionRegistry);
              break;
            }
            case 18: {
              global::org.zhangqi.proto.CurrentTurnInfo.Builder subBuilder = global::org.zhangqi.proto.CurrentTurnInfo.CreateBuilder();
              if (result.hasCurrentTurnInfo) {
                subBuilder.MergeFrom(CurrentTurnInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CurrentTurnInfo = subBuilder.BuildPartial();
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.battleCellInfo_);
              break;
            }
            case 32: {
              result.hasBattleStartTimestamp = input.ReadInt64(ref result.battleStartTimestamp_);
              break;
            }
            case 42:
            case 40: {
              input.ReadInt32Array(tag, field_name, result.notReadyUserIds_);
              break;
            }
            case 48: {
              result.hasLastEventNum = input.ReadInt32(ref result.lastEventNum_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::org.zhangqi.proto.UserBriefInfo> UserBriefInfosList {
        get { return PrepareBuilder().userBriefInfos_; }
      }
      public int UserBriefInfosCount {
        get { return result.UserBriefInfosCount; }
      }
      public global::org.zhangqi.proto.UserBriefInfo GetUserBriefInfos(int index) {
        return result.GetUserBriefInfos(index);
      }
      public Builder SetUserBriefInfos(int index, global::org.zhangqi.proto.UserBriefInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userBriefInfos_[index] = value;
        return this;
      }
      public Builder SetUserBriefInfos(int index, global::org.zhangqi.proto.UserBriefInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userBriefInfos_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUserBriefInfos(global::org.zhangqi.proto.UserBriefInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userBriefInfos_.Add(value);
        return this;
      }
      public Builder AddUserBriefInfos(global::org.zhangqi.proto.UserBriefInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userBriefInfos_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUserBriefInfos(scg::IEnumerable<global::org.zhangqi.proto.UserBriefInfo> values) {
        PrepareBuilder();
        result.userBriefInfos_.Add(values);
        return this;
      }
      public Builder ClearUserBriefInfos() {
        PrepareBuilder();
        result.userBriefInfos_.Clear();
        return this;
      }
      
      public bool HasCurrentTurnInfo {
       get { return result.hasCurrentTurnInfo; }
      }
      public global::org.zhangqi.proto.CurrentTurnInfo CurrentTurnInfo {
        get { return result.CurrentTurnInfo; }
        set { SetCurrentTurnInfo(value); }
      }
      public Builder SetCurrentTurnInfo(global::org.zhangqi.proto.CurrentTurnInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurrentTurnInfo = true;
        result.currentTurnInfo_ = value;
        return this;
      }
      public Builder SetCurrentTurnInfo(global::org.zhangqi.proto.CurrentTurnInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCurrentTurnInfo = true;
        result.currentTurnInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCurrentTurnInfo(global::org.zhangqi.proto.CurrentTurnInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCurrentTurnInfo &&
            result.currentTurnInfo_ != global::org.zhangqi.proto.CurrentTurnInfo.DefaultInstance) {
            result.currentTurnInfo_ = global::org.zhangqi.proto.CurrentTurnInfo.CreateBuilder(result.currentTurnInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.currentTurnInfo_ = value;
        }
        result.hasCurrentTurnInfo = true;
        return this;
      }
      public Builder ClearCurrentTurnInfo() {
        PrepareBuilder();
        result.hasCurrentTurnInfo = false;
        result.currentTurnInfo_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<int> BattleCellInfoList {
        get { return PrepareBuilder().battleCellInfo_; }
      }
      public int BattleCellInfoCount {
        get { return result.BattleCellInfoCount; }
      }
      public int GetBattleCellInfo(int index) {
        return result.GetBattleCellInfo(index);
      }
      public Builder SetBattleCellInfo(int index, int value) {
        PrepareBuilder();
        result.battleCellInfo_[index] = value;
        return this;
      }
      public Builder AddBattleCellInfo(int value) {
        PrepareBuilder();
        result.battleCellInfo_.Add(value);
        return this;
      }
      public Builder AddRangeBattleCellInfo(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.battleCellInfo_.Add(values);
        return this;
      }
      public Builder ClearBattleCellInfo() {
        PrepareBuilder();
        result.battleCellInfo_.Clear();
        return this;
      }
      
      public bool HasBattleStartTimestamp {
        get { return result.hasBattleStartTimestamp; }
      }
      public long BattleStartTimestamp {
        get { return result.BattleStartTimestamp; }
        set { SetBattleStartTimestamp(value); }
      }
      public Builder SetBattleStartTimestamp(long value) {
        PrepareBuilder();
        result.hasBattleStartTimestamp = true;
        result.battleStartTimestamp_ = value;
        return this;
      }
      public Builder ClearBattleStartTimestamp() {
        PrepareBuilder();
        result.hasBattleStartTimestamp = false;
        result.battleStartTimestamp_ = 0L;
        return this;
      }
      
      public pbc::IPopsicleList<int> NotReadyUserIdsList {
        get { return PrepareBuilder().notReadyUserIds_; }
      }
      public int NotReadyUserIdsCount {
        get { return result.NotReadyUserIdsCount; }
      }
      public int GetNotReadyUserIds(int index) {
        return result.GetNotReadyUserIds(index);
      }
      public Builder SetNotReadyUserIds(int index, int value) {
        PrepareBuilder();
        result.notReadyUserIds_[index] = value;
        return this;
      }
      public Builder AddNotReadyUserIds(int value) {
        PrepareBuilder();
        result.notReadyUserIds_.Add(value);
        return this;
      }
      public Builder AddRangeNotReadyUserIds(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.notReadyUserIds_.Add(values);
        return this;
      }
      public Builder ClearNotReadyUserIds() {
        PrepareBuilder();
        result.notReadyUserIds_.Clear();
        return this;
      }
      
      public bool HasLastEventNum {
        get { return result.hasLastEventNum; }
      }
      public int LastEventNum {
        get { return result.LastEventNum; }
        set { SetLastEventNum(value); }
      }
      public Builder SetLastEventNum(int value) {
        PrepareBuilder();
        result.hasLastEventNum = true;
        result.lastEventNum_ = value;
        return this;
      }
      public Builder ClearLastEventNum() {
        PrepareBuilder();
        result.hasLastEventNum = false;
        result.lastEventNum_ = 0;
        return this;
      }
    }
    static BattleInfo() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class CurrentTurnInfo : pb::GeneratedMessageLite<CurrentTurnInfo, CurrentTurnInfo.Builder> {
    private CurrentTurnInfo() { }
    private static readonly CurrentTurnInfo defaultInstance = new CurrentTurnInfo().MakeReadOnly();
    private static readonly string[] _currentTurnInfoFieldNames = new string[] { "turnCount", "turnStartTimestamp", "userId" };
    private static readonly uint[] _currentTurnInfoFieldTags = new uint[] { 8, 24, 16 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CurrentTurnInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override CurrentTurnInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CurrentTurnInfo ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int TurnCountFieldNumber = 1;
    private bool hasTurnCount;
    private int turnCount_;
    public bool HasTurnCount {
      get { return hasTurnCount; }
    }
    public int TurnCount {
      get { return turnCount_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UserIdFieldNumber = 2;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int TurnStartTimestampFieldNumber = 3;
    private bool hasTurnStartTimestamp;
    private long turnStartTimestamp_;
    public bool HasTurnStartTimestamp {
      get { return hasTurnStartTimestamp; }
    }
    public long TurnStartTimestamp {
      get { return turnStartTimestamp_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _currentTurnInfoFieldNames;
      if (hasTurnCount) {
        output.WriteInt32(1, field_names[0], TurnCount);
      }
      if (hasUserId) {
        output.WriteInt32(2, field_names[2], UserId);
      }
      if (hasTurnStartTimestamp) {
        output.WriteInt64(3, field_names[1], TurnStartTimestamp);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasTurnCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, TurnCount);
        }
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, UserId);
        }
        if (hasTurnStartTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, TurnStartTimestamp);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasTurnCount) hash ^= turnCount_.GetHashCode();
      if (hasUserId) hash ^= userId_.GetHashCode();
      if (hasTurnStartTimestamp) hash ^= turnStartTimestamp_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      CurrentTurnInfo other = obj as CurrentTurnInfo;
      if (other == null) return false;
      if (hasTurnCount != other.hasTurnCount || (hasTurnCount && !turnCount_.Equals(other.turnCount_))) return false;
      if (hasUserId != other.hasUserId || (hasUserId && !userId_.Equals(other.userId_))) return false;
      if (hasTurnStartTimestamp != other.hasTurnStartTimestamp || (hasTurnStartTimestamp && !turnStartTimestamp_.Equals(other.turnStartTimestamp_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CurrentTurnInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CurrentTurnInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CurrentTurnInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CurrentTurnInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CurrentTurnInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CurrentTurnInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CurrentTurnInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CurrentTurnInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CurrentTurnInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static CurrentTurnInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CurrentTurnInfo MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(CurrentTurnInfo prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<CurrentTurnInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CurrentTurnInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CurrentTurnInfo result;
      
      private CurrentTurnInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          CurrentTurnInfo original = result;
          result = new CurrentTurnInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CurrentTurnInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override CurrentTurnInfo DefaultInstanceForType {
        get { return global::org.zhangqi.proto.CurrentTurnInfo.DefaultInstance; }
      }
      
      public override CurrentTurnInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is CurrentTurnInfo) {
          return MergeFrom((CurrentTurnInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CurrentTurnInfo other) {
        if (other == global::org.zhangqi.proto.CurrentTurnInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTurnCount) {
          TurnCount = other.TurnCount;
        }
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasTurnStartTimestamp) {
          TurnStartTimestamp = other.TurnStartTimestamp;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_currentTurnInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _currentTurnInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTurnCount = input.ReadInt32(ref result.turnCount_);
              break;
            }
            case 16: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
            case 24: {
              result.hasTurnStartTimestamp = input.ReadInt64(ref result.turnStartTimestamp_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasTurnCount {
        get { return result.hasTurnCount; }
      }
      public int TurnCount {
        get { return result.TurnCount; }
        set { SetTurnCount(value); }
      }
      public Builder SetTurnCount(int value) {
        PrepareBuilder();
        result.hasTurnCount = true;
        result.turnCount_ = value;
        return this;
      }
      public Builder ClearTurnCount() {
        PrepareBuilder();
        result.hasTurnCount = false;
        result.turnCount_ = 0;
        return this;
      }
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
      
      public bool HasTurnStartTimestamp {
        get { return result.hasTurnStartTimestamp; }
      }
      public long TurnStartTimestamp {
        get { return result.TurnStartTimestamp; }
        set { SetTurnStartTimestamp(value); }
      }
      public Builder SetTurnStartTimestamp(long value) {
        PrepareBuilder();
        result.hasTurnStartTimestamp = true;
        result.turnStartTimestamp_ = value;
        return this;
      }
      public Builder ClearTurnStartTimestamp() {
        PrepareBuilder();
        result.hasTurnStartTimestamp = false;
        result.turnStartTimestamp_ = 0L;
        return this;
      }
    }
    static CurrentTurnInfo() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class BattleRecordData : pb::GeneratedMessageLite<BattleRecordData, BattleRecordData.Builder> {
    private BattleRecordData() { }
    private static readonly BattleRecordData defaultInstance = new BattleRecordData().MakeReadOnly();
    private static readonly string[] _battleRecordDataFieldNames = new string[] { "battleEndTimestamp", "battleId", "battleStartTimestamp", "battleType", "gameOverReason", "turnCount", "userBriefInfos", "winnerUserId" };
    private static readonly uint[] _battleRecordDataFieldTags = new uint[] { 40, 18, 32, 8, 64, 48, 26, 56 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRecordData DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override BattleRecordData DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BattleRecordData ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BattleTypeFieldNumber = 1;
    private bool hasBattleType;
    private global::org.zhangqi.proto.BattleTypeEnum battleType_ = global::org.zhangqi.proto.BattleTypeEnum.BattleTypeTwoPlayer;
    public bool HasBattleType {
      get { return hasBattleType; }
    }
    public global::org.zhangqi.proto.BattleTypeEnum BattleType {
      get { return battleType_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BattleIdFieldNumber = 2;
    private bool hasBattleId;
    private string battleId_ = "";
    public bool HasBattleId {
      get { return hasBattleId; }
    }
    public string BattleId {
      get { return battleId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UserBriefInfosFieldNumber = 3;
    private pbc::PopsicleList<global::org.zhangqi.proto.UserBriefInfo> userBriefInfos_ = new pbc::PopsicleList<global::org.zhangqi.proto.UserBriefInfo>();
    public scg::IList<global::org.zhangqi.proto.UserBriefInfo> UserBriefInfosList {
      get { return userBriefInfos_; }
    }
    public int UserBriefInfosCount {
      get { return userBriefInfos_.Count; }
    }
    public global::org.zhangqi.proto.UserBriefInfo GetUserBriefInfos(int index) {
      return userBriefInfos_[index];
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BattleStartTimestampFieldNumber = 4;
    private bool hasBattleStartTimestamp;
    private long battleStartTimestamp_;
    public bool HasBattleStartTimestamp {
      get { return hasBattleStartTimestamp; }
    }
    public long BattleStartTimestamp {
      get { return battleStartTimestamp_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BattleEndTimestampFieldNumber = 5;
    private bool hasBattleEndTimestamp;
    private long battleEndTimestamp_;
    public bool HasBattleEndTimestamp {
      get { return hasBattleEndTimestamp; }
    }
    public long BattleEndTimestamp {
      get { return battleEndTimestamp_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int TurnCountFieldNumber = 6;
    private bool hasTurnCount;
    private int turnCount_;
    public bool HasTurnCount {
      get { return hasTurnCount; }
    }
    public int TurnCount {
      get { return turnCount_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int WinnerUserIdFieldNumber = 7;
    private bool hasWinnerUserId;
    private int winnerUserId_;
    public bool HasWinnerUserId {
      get { return hasWinnerUserId; }
    }
    public int WinnerUserId {
      get { return winnerUserId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int GameOverReasonFieldNumber = 8;
    private bool hasGameOverReason;
    private global::org.zhangqi.proto.GameOverReasonEnum gameOverReason_ = global::org.zhangqi.proto.GameOverReasonEnum.GameOverPlayerWin;
    public bool HasGameOverReason {
      get { return hasGameOverReason; }
    }
    public global::org.zhangqi.proto.GameOverReasonEnum GameOverReason {
      get { return gameOverReason_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _battleRecordDataFieldNames;
      if (hasBattleType) {
        output.WriteEnum(1, field_names[3], (int) BattleType, BattleType);
      }
      if (hasBattleId) {
        output.WriteString(2, field_names[1], BattleId);
      }
      if (userBriefInfos_.Count > 0) {
        output.WriteMessageArray(3, field_names[6], userBriefInfos_);
      }
      if (hasBattleStartTimestamp) {
        output.WriteInt64(4, field_names[2], BattleStartTimestamp);
      }
      if (hasBattleEndTimestamp) {
        output.WriteInt64(5, field_names[0], BattleEndTimestamp);
      }
      if (hasTurnCount) {
        output.WriteInt32(6, field_names[5], TurnCount);
      }
      if (hasWinnerUserId) {
        output.WriteInt32(7, field_names[7], WinnerUserId);
      }
      if (hasGameOverReason) {
        output.WriteEnum(8, field_names[4], (int) GameOverReason, GameOverReason);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBattleType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) BattleType);
        }
        if (hasBattleId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BattleId);
        }
        foreach (global::org.zhangqi.proto.UserBriefInfo element in UserBriefInfosList) {
          size += pb::CodedOutputStream.ComputeMessageSize(3, element);
        }
        if (hasBattleStartTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(4, BattleStartTimestamp);
        }
        if (hasBattleEndTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(5, BattleEndTimestamp);
        }
        if (hasTurnCount) {
          size += pb::CodedOutputStream.ComputeInt32Size(6, TurnCount);
        }
        if (hasWinnerUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(7, WinnerUserId);
        }
        if (hasGameOverReason) {
          size += pb::CodedOutputStream.ComputeEnumSize(8, (int) GameOverReason);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasBattleType) hash ^= battleType_.GetHashCode();
      if (hasBattleId) hash ^= battleId_.GetHashCode();
      foreach(global::org.zhangqi.proto.UserBriefInfo i in userBriefInfos_)
        hash ^= i.GetHashCode();
      if (hasBattleStartTimestamp) hash ^= battleStartTimestamp_.GetHashCode();
      if (hasBattleEndTimestamp) hash ^= battleEndTimestamp_.GetHashCode();
      if (hasTurnCount) hash ^= turnCount_.GetHashCode();
      if (hasWinnerUserId) hash ^= winnerUserId_.GetHashCode();
      if (hasGameOverReason) hash ^= gameOverReason_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      BattleRecordData other = obj as BattleRecordData;
      if (other == null) return false;
      if (hasBattleType != other.hasBattleType || (hasBattleType && !battleType_.Equals(other.battleType_))) return false;
      if (hasBattleId != other.hasBattleId || (hasBattleId && !battleId_.Equals(other.battleId_))) return false;
      if(userBriefInfos_.Count != other.userBriefInfos_.Count) return false;
      for(int ix=0; ix < userBriefInfos_.Count; ix++)
        if(!userBriefInfos_[ix].Equals(other.userBriefInfos_[ix])) return false;
      if (hasBattleStartTimestamp != other.hasBattleStartTimestamp || (hasBattleStartTimestamp && !battleStartTimestamp_.Equals(other.battleStartTimestamp_))) return false;
      if (hasBattleEndTimestamp != other.hasBattleEndTimestamp || (hasBattleEndTimestamp && !battleEndTimestamp_.Equals(other.battleEndTimestamp_))) return false;
      if (hasTurnCount != other.hasTurnCount || (hasTurnCount && !turnCount_.Equals(other.turnCount_))) return false;
      if (hasWinnerUserId != other.hasWinnerUserId || (hasWinnerUserId && !winnerUserId_.Equals(other.winnerUserId_))) return false;
      if (hasGameOverReason != other.hasGameOverReason || (hasGameOverReason && !gameOverReason_.Equals(other.gameOverReason_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRecordData ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRecordData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRecordData ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRecordData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRecordData ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRecordData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRecordData ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRecordData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRecordData ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRecordData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BattleRecordData MakeReadOnly() {
      userBriefInfos_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(BattleRecordData prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<BattleRecordData, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BattleRecordData cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BattleRecordData result;
      
      private BattleRecordData PrepareBuilder() {
        if (resultIsReadOnly) {
          BattleRecordData original = result;
          result = new BattleRecordData();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BattleRecordData MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override BattleRecordData DefaultInstanceForType {
        get { return global::org.zhangqi.proto.BattleRecordData.DefaultInstance; }
      }
      
      public override BattleRecordData BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is BattleRecordData) {
          return MergeFrom((BattleRecordData) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BattleRecordData other) {
        if (other == global::org.zhangqi.proto.BattleRecordData.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBattleType) {
          BattleType = other.BattleType;
        }
        if (other.HasBattleId) {
          BattleId = other.BattleId;
        }
        if (other.userBriefInfos_.Count != 0) {
          result.userBriefInfos_.Add(other.userBriefInfos_);
        }
        if (other.HasBattleStartTimestamp) {
          BattleStartTimestamp = other.BattleStartTimestamp;
        }
        if (other.HasBattleEndTimestamp) {
          BattleEndTimestamp = other.BattleEndTimestamp;
        }
        if (other.HasTurnCount) {
          TurnCount = other.TurnCount;
        }
        if (other.HasWinnerUserId) {
          WinnerUserId = other.WinnerUserId;
        }
        if (other.HasGameOverReason) {
          GameOverReason = other.GameOverReason;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_battleRecordDataFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _battleRecordDataFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              int number = 0;
              string str = null;
              if(input.ReadEnum(ref number, ref str)) {
                try {
                  if (str != null) {
                    result.battleType_ = (global::org.zhangqi.proto.BattleTypeEnum)System.Enum.Parse(typeof(global::org.zhangqi.proto.BattleTypeEnum), str);
                  } else {
                    result.battleType_ = (global::org.zhangqi.proto.BattleTypeEnum)number;
                  }
                  result.hasBattleType = true;
                }
                catch {
                }
              }
              break;
            }
            case 18: {
              result.hasBattleId = input.ReadString(ref result.battleId_);
              break;
            }
            case 26: {
              input.ReadMessageArray(tag, field_name, result.userBriefInfos_, global::org.zhangqi.proto.UserBriefInfo.DefaultInstance, extensionRegistry);
              break;
            }
            case 32: {
              result.hasBattleStartTimestamp = input.ReadInt64(ref result.battleStartTimestamp_);
              break;
            }
            case 40: {
              result.hasBattleEndTimestamp = input.ReadInt64(ref result.battleEndTimestamp_);
              break;
            }
            case 48: {
              result.hasTurnCount = input.ReadInt32(ref result.turnCount_);
              break;
            }
            case 56: {
              result.hasWinnerUserId = input.ReadInt32(ref result.winnerUserId_);
              break;
            }
            case 64: {
              int number = 0;
              string str = null;
              if(input.ReadEnum(ref number, ref str)) {
                try {
                  if (str != null) {
                    result.gameOverReason_ = (global::org.zhangqi.proto.GameOverReasonEnum)System.Enum.Parse(typeof(global::org.zhangqi.proto.GameOverReasonEnum), str);
                  } else {
                    result.gameOverReason_ = (global::org.zhangqi.proto.GameOverReasonEnum)number;
                  }
                  result.hasGameOverReason = true;
                }
                catch {
                }
              }
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasBattleType {
       get { return result.hasBattleType; }
      }
      public global::org.zhangqi.proto.BattleTypeEnum BattleType {
        get { return result.BattleType; }
        set { SetBattleType(value); }
      }
      public Builder SetBattleType(global::org.zhangqi.proto.BattleTypeEnum value) {
        PrepareBuilder();
        result.hasBattleType = true;
        result.battleType_ = value;
        return this;
      }
      public Builder ClearBattleType() {
        PrepareBuilder();
        result.hasBattleType = false;
        result.battleType_ = global::org.zhangqi.proto.BattleTypeEnum.BattleTypeTwoPlayer;
        return this;
      }
      
      public bool HasBattleId {
        get { return result.hasBattleId; }
      }
      public string BattleId {
        get { return result.BattleId; }
        set { SetBattleId(value); }
      }
      public Builder SetBattleId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBattleId = true;
        result.battleId_ = value;
        return this;
      }
      public Builder ClearBattleId() {
        PrepareBuilder();
        result.hasBattleId = false;
        result.battleId_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<global::org.zhangqi.proto.UserBriefInfo> UserBriefInfosList {
        get { return PrepareBuilder().userBriefInfos_; }
      }
      public int UserBriefInfosCount {
        get { return result.UserBriefInfosCount; }
      }
      public global::org.zhangqi.proto.UserBriefInfo GetUserBriefInfos(int index) {
        return result.GetUserBriefInfos(index);
      }
      public Builder SetUserBriefInfos(int index, global::org.zhangqi.proto.UserBriefInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userBriefInfos_[index] = value;
        return this;
      }
      public Builder SetUserBriefInfos(int index, global::org.zhangqi.proto.UserBriefInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userBriefInfos_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUserBriefInfos(global::org.zhangqi.proto.UserBriefInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userBriefInfos_.Add(value);
        return this;
      }
      public Builder AddUserBriefInfos(global::org.zhangqi.proto.UserBriefInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userBriefInfos_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUserBriefInfos(scg::IEnumerable<global::org.zhangqi.proto.UserBriefInfo> values) {
        PrepareBuilder();
        result.userBriefInfos_.Add(values);
        return this;
      }
      public Builder ClearUserBriefInfos() {
        PrepareBuilder();
        result.userBriefInfos_.Clear();
        return this;
      }
      
      public bool HasBattleStartTimestamp {
        get { return result.hasBattleStartTimestamp; }
      }
      public long BattleStartTimestamp {
        get { return result.BattleStartTimestamp; }
        set { SetBattleStartTimestamp(value); }
      }
      public Builder SetBattleStartTimestamp(long value) {
        PrepareBuilder();
        result.hasBattleStartTimestamp = true;
        result.battleStartTimestamp_ = value;
        return this;
      }
      public Builder ClearBattleStartTimestamp() {
        PrepareBuilder();
        result.hasBattleStartTimestamp = false;
        result.battleStartTimestamp_ = 0L;
        return this;
      }
      
      public bool HasBattleEndTimestamp {
        get { return result.hasBattleEndTimestamp; }
      }
      public long BattleEndTimestamp {
        get { return result.BattleEndTimestamp; }
        set { SetBattleEndTimestamp(value); }
      }
      public Builder SetBattleEndTimestamp(long value) {
        PrepareBuilder();
        result.hasBattleEndTimestamp = true;
        result.battleEndTimestamp_ = value;
        return this;
      }
      public Builder ClearBattleEndTimestamp() {
        PrepareBuilder();
        result.hasBattleEndTimestamp = false;
        result.battleEndTimestamp_ = 0L;
        return this;
      }
      
      public bool HasTurnCount {
        get { return result.hasTurnCount; }
      }
      public int TurnCount {
        get { return result.TurnCount; }
        set { SetTurnCount(value); }
      }
      public Builder SetTurnCount(int value) {
        PrepareBuilder();
        result.hasTurnCount = true;
        result.turnCount_ = value;
        return this;
      }
      public Builder ClearTurnCount() {
        PrepareBuilder();
        result.hasTurnCount = false;
        result.turnCount_ = 0;
        return this;
      }
      
      public bool HasWinnerUserId {
        get { return result.hasWinnerUserId; }
      }
      public int WinnerUserId {
        get { return result.WinnerUserId; }
        set { SetWinnerUserId(value); }
      }
      public Builder SetWinnerUserId(int value) {
        PrepareBuilder();
        result.hasWinnerUserId = true;
        result.winnerUserId_ = value;
        return this;
      }
      public Builder ClearWinnerUserId() {
        PrepareBuilder();
        result.hasWinnerUserId = false;
        result.winnerUserId_ = 0;
        return this;
      }
      
      public bool HasGameOverReason {
       get { return result.hasGameOverReason; }
      }
      public global::org.zhangqi.proto.GameOverReasonEnum GameOverReason {
        get { return result.GameOverReason; }
        set { SetGameOverReason(value); }
      }
      public Builder SetGameOverReason(global::org.zhangqi.proto.GameOverReasonEnum value) {
        PrepareBuilder();
        result.hasGameOverReason = true;
        result.gameOverReason_ = value;
        return this;
      }
      public Builder ClearGameOverReason() {
        PrepareBuilder();
        result.hasGameOverReason = false;
        result.gameOverReason_ = global::org.zhangqi.proto.GameOverReasonEnum.GameOverPlayerWin;
        return this;
      }
    }
    static BattleRecordData() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class GetBattleInfoRequest : pb::GeneratedMessageLite<GetBattleInfoRequest, GetBattleInfoRequest.Builder> {
    private GetBattleInfoRequest() { }
    private static readonly GetBattleInfoRequest defaultInstance = new GetBattleInfoRequest().MakeReadOnly();
    private static readonly string[] _getBattleInfoRequestFieldNames = new string[] {  };
    private static readonly uint[] _getBattleInfoRequestFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override GetBattleInfoRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetBattleInfoRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getBattleInfoRequestFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      GetBattleInfoRequest other = obj as GetBattleInfoRequest;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetBattleInfoRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(GetBattleInfoRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<GetBattleInfoRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetBattleInfoRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetBattleInfoRequest result;
      
      private GetBattleInfoRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          GetBattleInfoRequest original = result;
          result = new GetBattleInfoRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetBattleInfoRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override GetBattleInfoRequest DefaultInstanceForType {
        get { return global::org.zhangqi.proto.GetBattleInfoRequest.DefaultInstance; }
      }
      
      public override GetBattleInfoRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is GetBattleInfoRequest) {
          return MergeFrom((GetBattleInfoRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetBattleInfoRequest other) {
        if (other == global::org.zhangqi.proto.GetBattleInfoRequest.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getBattleInfoRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getBattleInfoRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static GetBattleInfoRequest() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class GetBattleInfoResponse : pb::GeneratedMessageLite<GetBattleInfoResponse, GetBattleInfoResponse.Builder> {
    private GetBattleInfoResponse() { }
    private static readonly GetBattleInfoResponse defaultInstance = new GetBattleInfoResponse().MakeReadOnly();
    private static readonly string[] _getBattleInfoResponseFieldNames = new string[] { "battleInfo" };
    private static readonly uint[] _getBattleInfoResponseFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override GetBattleInfoResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GetBattleInfoResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BattleInfoFieldNumber = 1;
    private bool hasBattleInfo;
    private global::org.zhangqi.proto.BattleInfo battleInfo_;
    public bool HasBattleInfo {
      get { return hasBattleInfo; }
    }
    public global::org.zhangqi.proto.BattleInfo BattleInfo {
      get { return battleInfo_ ?? global::org.zhangqi.proto.BattleInfo.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _getBattleInfoResponseFieldNames;
      if (hasBattleInfo) {
        output.WriteMessage(1, field_names[0], BattleInfo);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBattleInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BattleInfo);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasBattleInfo) hash ^= battleInfo_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      GetBattleInfoResponse other = obj as GetBattleInfoResponse;
      if (other == null) return false;
      if (hasBattleInfo != other.hasBattleInfo || (hasBattleInfo && !battleInfo_.Equals(other.battleInfo_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GetBattleInfoResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GetBattleInfoResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(GetBattleInfoResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<GetBattleInfoResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GetBattleInfoResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GetBattleInfoResponse result;
      
      private GetBattleInfoResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          GetBattleInfoResponse original = result;
          result = new GetBattleInfoResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GetBattleInfoResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override GetBattleInfoResponse DefaultInstanceForType {
        get { return global::org.zhangqi.proto.GetBattleInfoResponse.DefaultInstance; }
      }
      
      public override GetBattleInfoResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is GetBattleInfoResponse) {
          return MergeFrom((GetBattleInfoResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GetBattleInfoResponse other) {
        if (other == global::org.zhangqi.proto.GetBattleInfoResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBattleInfo) {
          MergeBattleInfo(other.BattleInfo);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_getBattleInfoResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _getBattleInfoResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::org.zhangqi.proto.BattleInfo.Builder subBuilder = global::org.zhangqi.proto.BattleInfo.CreateBuilder();
              if (result.hasBattleInfo) {
                subBuilder.MergeFrom(BattleInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BattleInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasBattleInfo {
       get { return result.hasBattleInfo; }
      }
      public global::org.zhangqi.proto.BattleInfo BattleInfo {
        get { return result.BattleInfo; }
        set { SetBattleInfo(value); }
      }
      public Builder SetBattleInfo(global::org.zhangqi.proto.BattleInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBattleInfo = true;
        result.battleInfo_ = value;
        return this;
      }
      public Builder SetBattleInfo(global::org.zhangqi.proto.BattleInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBattleInfo = true;
        result.battleInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBattleInfo(global::org.zhangqi.proto.BattleInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBattleInfo &&
            result.battleInfo_ != global::org.zhangqi.proto.BattleInfo.DefaultInstance) {
            result.battleInfo_ = global::org.zhangqi.proto.BattleInfo.CreateBuilder(result.battleInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.battleInfo_ = value;
        }
        result.hasBattleInfo = true;
        return this;
      }
      public Builder ClearBattleInfo() {
        PrepareBuilder();
        result.hasBattleInfo = false;
        result.battleInfo_ = null;
        return this;
      }
    }
    static GetBattleInfoResponse() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class ConcedeRequest : pb::GeneratedMessageLite<ConcedeRequest, ConcedeRequest.Builder> {
    private ConcedeRequest() { }
    private static readonly ConcedeRequest defaultInstance = new ConcedeRequest().MakeReadOnly();
    private static readonly string[] _concedeRequestFieldNames = new string[] {  };
    private static readonly uint[] _concedeRequestFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ConcedeRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConcedeRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _concedeRequestFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ConcedeRequest other = obj as ConcedeRequest;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConcedeRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ConcedeRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ConcedeRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConcedeRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConcedeRequest result;
      
      private ConcedeRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ConcedeRequest original = result;
          result = new ConcedeRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConcedeRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ConcedeRequest DefaultInstanceForType {
        get { return global::org.zhangqi.proto.ConcedeRequest.DefaultInstance; }
      }
      
      public override ConcedeRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ConcedeRequest) {
          return MergeFrom((ConcedeRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConcedeRequest other) {
        if (other == global::org.zhangqi.proto.ConcedeRequest.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_concedeRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _concedeRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static ConcedeRequest() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class ConcedeResponse : pb::GeneratedMessageLite<ConcedeResponse, ConcedeResponse.Builder> {
    private ConcedeResponse() { }
    private static readonly ConcedeResponse defaultInstance = new ConcedeResponse().MakeReadOnly();
    private static readonly string[] _concedeResponseFieldNames = new string[] { "eventList" };
    private static readonly uint[] _concedeResponseFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ConcedeResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ConcedeResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int EventListFieldNumber = 1;
    private bool hasEventList;
    private global::org.zhangqi.proto.EventMsgList eventList_;
    public bool HasEventList {
      get { return hasEventList; }
    }
    public global::org.zhangqi.proto.EventMsgList EventList {
      get { return eventList_ ?? global::org.zhangqi.proto.EventMsgList.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _concedeResponseFieldNames;
      if (hasEventList) {
        output.WriteMessage(1, field_names[0], EventList);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEventList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, EventList);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasEventList) hash ^= eventList_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ConcedeResponse other = obj as ConcedeResponse;
      if (other == null) return false;
      if (hasEventList != other.hasEventList || (hasEventList && !eventList_.Equals(other.eventList_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ConcedeResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ConcedeResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ConcedeResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ConcedeResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ConcedeResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ConcedeResponse result;
      
      private ConcedeResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ConcedeResponse original = result;
          result = new ConcedeResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ConcedeResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ConcedeResponse DefaultInstanceForType {
        get { return global::org.zhangqi.proto.ConcedeResponse.DefaultInstance; }
      }
      
      public override ConcedeResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ConcedeResponse) {
          return MergeFrom((ConcedeResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ConcedeResponse other) {
        if (other == global::org.zhangqi.proto.ConcedeResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEventList) {
          MergeEventList(other.EventList);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_concedeResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _concedeResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::org.zhangqi.proto.EventMsgList.Builder subBuilder = global::org.zhangqi.proto.EventMsgList.CreateBuilder();
              if (result.hasEventList) {
                subBuilder.MergeFrom(EventList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EventList = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasEventList {
       get { return result.hasEventList; }
      }
      public global::org.zhangqi.proto.EventMsgList EventList {
        get { return result.EventList; }
        set { SetEventList(value); }
      }
      public Builder SetEventList(global::org.zhangqi.proto.EventMsgList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEventList = true;
        result.eventList_ = value;
        return this;
      }
      public Builder SetEventList(global::org.zhangqi.proto.EventMsgList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEventList = true;
        result.eventList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEventList(global::org.zhangqi.proto.EventMsgList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEventList &&
            result.eventList_ != global::org.zhangqi.proto.EventMsgList.DefaultInstance) {
            result.eventList_ = global::org.zhangqi.proto.EventMsgList.CreateBuilder(result.eventList_).MergeFrom(value).BuildPartial();
        } else {
          result.eventList_ = value;
        }
        result.hasEventList = true;
        return this;
      }
      public Builder ClearEventList() {
        PrepareBuilder();
        result.hasEventList = false;
        result.eventList_ = null;
        return this;
      }
    }
    static ConcedeResponse() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class PlacePiecesRequest : pb::GeneratedMessageLite<PlacePiecesRequest, PlacePiecesRequest.Builder> {
    private PlacePiecesRequest() { }
    private static readonly PlacePiecesRequest defaultInstance = new PlacePiecesRequest().MakeReadOnly();
    private static readonly string[] _placePiecesRequestFieldNames = new string[] { "index", "lastEventNum" };
    private static readonly uint[] _placePiecesRequestFieldTags = new uint[] { 16, 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlacePiecesRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlacePiecesRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int LastEventNumFieldNumber = 1;
    private bool hasLastEventNum;
    private int lastEventNum_;
    public bool HasLastEventNum {
      get { return hasLastEventNum; }
    }
    public int LastEventNum {
      get { return lastEventNum_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IndexFieldNumber = 2;
    private bool hasIndex;
    private int index_;
    public bool HasIndex {
      get { return hasIndex; }
    }
    public int Index {
      get { return index_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _placePiecesRequestFieldNames;
      if (hasLastEventNum) {
        output.WriteInt32(1, field_names[1], LastEventNum);
      }
      if (hasIndex) {
        output.WriteInt32(2, field_names[0], Index);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasLastEventNum) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, LastEventNum);
        }
        if (hasIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Index);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasLastEventNum) hash ^= lastEventNum_.GetHashCode();
      if (hasIndex) hash ^= index_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlacePiecesRequest other = obj as PlacePiecesRequest;
      if (other == null) return false;
      if (hasLastEventNum != other.hasLastEventNum || (hasLastEventNum && !lastEventNum_.Equals(other.lastEventNum_))) return false;
      if (hasIndex != other.hasIndex || (hasIndex && !index_.Equals(other.index_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlacePiecesRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlacePiecesRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlacePiecesRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlacePiecesRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlacePiecesRequest result;
      
      private PlacePiecesRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          PlacePiecesRequest original = result;
          result = new PlacePiecesRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlacePiecesRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlacePiecesRequest DefaultInstanceForType {
        get { return global::org.zhangqi.proto.PlacePiecesRequest.DefaultInstance; }
      }
      
      public override PlacePiecesRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlacePiecesRequest) {
          return MergeFrom((PlacePiecesRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlacePiecesRequest other) {
        if (other == global::org.zhangqi.proto.PlacePiecesRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasLastEventNum) {
          LastEventNum = other.LastEventNum;
        }
        if (other.HasIndex) {
          Index = other.Index;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_placePiecesRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _placePiecesRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasLastEventNum = input.ReadInt32(ref result.lastEventNum_);
              break;
            }
            case 16: {
              result.hasIndex = input.ReadInt32(ref result.index_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasLastEventNum {
        get { return result.hasLastEventNum; }
      }
      public int LastEventNum {
        get { return result.LastEventNum; }
        set { SetLastEventNum(value); }
      }
      public Builder SetLastEventNum(int value) {
        PrepareBuilder();
        result.hasLastEventNum = true;
        result.lastEventNum_ = value;
        return this;
      }
      public Builder ClearLastEventNum() {
        PrepareBuilder();
        result.hasLastEventNum = false;
        result.lastEventNum_ = 0;
        return this;
      }
      
      public bool HasIndex {
        get { return result.hasIndex; }
      }
      public int Index {
        get { return result.Index; }
        set { SetIndex(value); }
      }
      public Builder SetIndex(int value) {
        PrepareBuilder();
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder ClearIndex() {
        PrepareBuilder();
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
    }
    static PlacePiecesRequest() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class PlacePiecesResponse : pb::GeneratedMessageLite<PlacePiecesResponse, PlacePiecesResponse.Builder> {
    private PlacePiecesResponse() { }
    private static readonly PlacePiecesResponse defaultInstance = new PlacePiecesResponse().MakeReadOnly();
    private static readonly string[] _placePiecesResponseFieldNames = new string[] { "eventList" };
    private static readonly uint[] _placePiecesResponseFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlacePiecesResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlacePiecesResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int EventListFieldNumber = 1;
    private bool hasEventList;
    private global::org.zhangqi.proto.EventMsgList eventList_;
    public bool HasEventList {
      get { return hasEventList; }
    }
    public global::org.zhangqi.proto.EventMsgList EventList {
      get { return eventList_ ?? global::org.zhangqi.proto.EventMsgList.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _placePiecesResponseFieldNames;
      if (hasEventList) {
        output.WriteMessage(1, field_names[0], EventList);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEventList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, EventList);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasEventList) hash ^= eventList_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlacePiecesResponse other = obj as PlacePiecesResponse;
      if (other == null) return false;
      if (hasEventList != other.hasEventList || (hasEventList && !eventList_.Equals(other.eventList_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlacePiecesResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlacePiecesResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlacePiecesResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlacePiecesResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlacePiecesResponse result;
      
      private PlacePiecesResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          PlacePiecesResponse original = result;
          result = new PlacePiecesResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlacePiecesResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlacePiecesResponse DefaultInstanceForType {
        get { return global::org.zhangqi.proto.PlacePiecesResponse.DefaultInstance; }
      }
      
      public override PlacePiecesResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlacePiecesResponse) {
          return MergeFrom((PlacePiecesResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlacePiecesResponse other) {
        if (other == global::org.zhangqi.proto.PlacePiecesResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEventList) {
          MergeEventList(other.EventList);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_placePiecesResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _placePiecesResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::org.zhangqi.proto.EventMsgList.Builder subBuilder = global::org.zhangqi.proto.EventMsgList.CreateBuilder();
              if (result.hasEventList) {
                subBuilder.MergeFrom(EventList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EventList = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasEventList {
       get { return result.hasEventList; }
      }
      public global::org.zhangqi.proto.EventMsgList EventList {
        get { return result.EventList; }
        set { SetEventList(value); }
      }
      public Builder SetEventList(global::org.zhangqi.proto.EventMsgList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEventList = true;
        result.eventList_ = value;
        return this;
      }
      public Builder SetEventList(global::org.zhangqi.proto.EventMsgList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEventList = true;
        result.eventList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEventList(global::org.zhangqi.proto.EventMsgList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEventList &&
            result.eventList_ != global::org.zhangqi.proto.EventMsgList.DefaultInstance) {
            result.eventList_ = global::org.zhangqi.proto.EventMsgList.CreateBuilder(result.eventList_).MergeFrom(value).BuildPartial();
        } else {
          result.eventList_ = value;
        }
        result.hasEventList = true;
        return this;
      }
      public Builder ClearEventList() {
        PrepareBuilder();
        result.hasEventList = false;
        result.eventList_ = null;
        return this;
      }
    }
    static PlacePiecesResponse() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class ForceEndTurnRequest : pb::GeneratedMessageLite<ForceEndTurnRequest, ForceEndTurnRequest.Builder> {
    private ForceEndTurnRequest() { }
    private static readonly ForceEndTurnRequest defaultInstance = new ForceEndTurnRequest().MakeReadOnly();
    private static readonly string[] _forceEndTurnRequestFieldNames = new string[] { "forceEndTurnInfo" };
    private static readonly uint[] _forceEndTurnRequestFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ForceEndTurnRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ForceEndTurnRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ForceEndTurnInfoFieldNumber = 1;
    private bool hasForceEndTurnInfo;
    private global::org.zhangqi.proto.CurrentTurnInfo forceEndTurnInfo_;
    public bool HasForceEndTurnInfo {
      get { return hasForceEndTurnInfo; }
    }
    public global::org.zhangqi.proto.CurrentTurnInfo ForceEndTurnInfo {
      get { return forceEndTurnInfo_ ?? global::org.zhangqi.proto.CurrentTurnInfo.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _forceEndTurnRequestFieldNames;
      if (hasForceEndTurnInfo) {
        output.WriteMessage(1, field_names[0], ForceEndTurnInfo);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasForceEndTurnInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ForceEndTurnInfo);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasForceEndTurnInfo) hash ^= forceEndTurnInfo_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ForceEndTurnRequest other = obj as ForceEndTurnRequest;
      if (other == null) return false;
      if (hasForceEndTurnInfo != other.hasForceEndTurnInfo || (hasForceEndTurnInfo && !forceEndTurnInfo_.Equals(other.forceEndTurnInfo_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ForceEndTurnRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ForceEndTurnRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ForceEndTurnRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ForceEndTurnRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ForceEndTurnRequest result;
      
      private ForceEndTurnRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ForceEndTurnRequest original = result;
          result = new ForceEndTurnRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ForceEndTurnRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ForceEndTurnRequest DefaultInstanceForType {
        get { return global::org.zhangqi.proto.ForceEndTurnRequest.DefaultInstance; }
      }
      
      public override ForceEndTurnRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ForceEndTurnRequest) {
          return MergeFrom((ForceEndTurnRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ForceEndTurnRequest other) {
        if (other == global::org.zhangqi.proto.ForceEndTurnRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasForceEndTurnInfo) {
          MergeForceEndTurnInfo(other.ForceEndTurnInfo);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_forceEndTurnRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _forceEndTurnRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::org.zhangqi.proto.CurrentTurnInfo.Builder subBuilder = global::org.zhangqi.proto.CurrentTurnInfo.CreateBuilder();
              if (result.hasForceEndTurnInfo) {
                subBuilder.MergeFrom(ForceEndTurnInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ForceEndTurnInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasForceEndTurnInfo {
       get { return result.hasForceEndTurnInfo; }
      }
      public global::org.zhangqi.proto.CurrentTurnInfo ForceEndTurnInfo {
        get { return result.ForceEndTurnInfo; }
        set { SetForceEndTurnInfo(value); }
      }
      public Builder SetForceEndTurnInfo(global::org.zhangqi.proto.CurrentTurnInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasForceEndTurnInfo = true;
        result.forceEndTurnInfo_ = value;
        return this;
      }
      public Builder SetForceEndTurnInfo(global::org.zhangqi.proto.CurrentTurnInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasForceEndTurnInfo = true;
        result.forceEndTurnInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeForceEndTurnInfo(global::org.zhangqi.proto.CurrentTurnInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasForceEndTurnInfo &&
            result.forceEndTurnInfo_ != global::org.zhangqi.proto.CurrentTurnInfo.DefaultInstance) {
            result.forceEndTurnInfo_ = global::org.zhangqi.proto.CurrentTurnInfo.CreateBuilder(result.forceEndTurnInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.forceEndTurnInfo_ = value;
        }
        result.hasForceEndTurnInfo = true;
        return this;
      }
      public Builder ClearForceEndTurnInfo() {
        PrepareBuilder();
        result.hasForceEndTurnInfo = false;
        result.forceEndTurnInfo_ = null;
        return this;
      }
    }
    static ForceEndTurnRequest() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class ForceEndTurnResponse : pb::GeneratedMessageLite<ForceEndTurnResponse, ForceEndTurnResponse.Builder> {
    private ForceEndTurnResponse() { }
    private static readonly ForceEndTurnResponse defaultInstance = new ForceEndTurnResponse().MakeReadOnly();
    private static readonly string[] _forceEndTurnResponseFieldNames = new string[] { "forceEndTurnTimestamp", "isChecked", "remainMsec" };
    private static readonly uint[] _forceEndTurnResponseFieldTags = new uint[] { 16, 8, 24 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ForceEndTurnResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ForceEndTurnResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IsCheckedFieldNumber = 1;
    private bool hasIsChecked;
    private bool isChecked_;
    public bool HasIsChecked {
      get { return hasIsChecked; }
    }
    public bool IsChecked {
      get { return isChecked_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ForceEndTurnTimestampFieldNumber = 2;
    private bool hasForceEndTurnTimestamp;
    private long forceEndTurnTimestamp_;
    public bool HasForceEndTurnTimestamp {
      get { return hasForceEndTurnTimestamp; }
    }
    public long ForceEndTurnTimestamp {
      get { return forceEndTurnTimestamp_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int RemainMsecFieldNumber = 3;
    private bool hasRemainMsec;
    private long remainMsec_;
    public bool HasRemainMsec {
      get { return hasRemainMsec; }
    }
    public long RemainMsec {
      get { return remainMsec_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _forceEndTurnResponseFieldNames;
      if (hasIsChecked) {
        output.WriteBool(1, field_names[1], IsChecked);
      }
      if (hasForceEndTurnTimestamp) {
        output.WriteInt64(2, field_names[0], ForceEndTurnTimestamp);
      }
      if (hasRemainMsec) {
        output.WriteInt64(3, field_names[2], RemainMsec);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIsChecked) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, IsChecked);
        }
        if (hasForceEndTurnTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, ForceEndTurnTimestamp);
        }
        if (hasRemainMsec) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, RemainMsec);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasIsChecked) hash ^= isChecked_.GetHashCode();
      if (hasForceEndTurnTimestamp) hash ^= forceEndTurnTimestamp_.GetHashCode();
      if (hasRemainMsec) hash ^= remainMsec_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ForceEndTurnResponse other = obj as ForceEndTurnResponse;
      if (other == null) return false;
      if (hasIsChecked != other.hasIsChecked || (hasIsChecked && !isChecked_.Equals(other.isChecked_))) return false;
      if (hasForceEndTurnTimestamp != other.hasForceEndTurnTimestamp || (hasForceEndTurnTimestamp && !forceEndTurnTimestamp_.Equals(other.forceEndTurnTimestamp_))) return false;
      if (hasRemainMsec != other.hasRemainMsec || (hasRemainMsec && !remainMsec_.Equals(other.remainMsec_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceEndTurnResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ForceEndTurnResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ForceEndTurnResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ForceEndTurnResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ForceEndTurnResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ForceEndTurnResponse result;
      
      private ForceEndTurnResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ForceEndTurnResponse original = result;
          result = new ForceEndTurnResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ForceEndTurnResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ForceEndTurnResponse DefaultInstanceForType {
        get { return global::org.zhangqi.proto.ForceEndTurnResponse.DefaultInstance; }
      }
      
      public override ForceEndTurnResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ForceEndTurnResponse) {
          return MergeFrom((ForceEndTurnResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ForceEndTurnResponse other) {
        if (other == global::org.zhangqi.proto.ForceEndTurnResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsChecked) {
          IsChecked = other.IsChecked;
        }
        if (other.HasForceEndTurnTimestamp) {
          ForceEndTurnTimestamp = other.ForceEndTurnTimestamp;
        }
        if (other.HasRemainMsec) {
          RemainMsec = other.RemainMsec;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_forceEndTurnResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _forceEndTurnResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsChecked = input.ReadBool(ref result.isChecked_);
              break;
            }
            case 16: {
              result.hasForceEndTurnTimestamp = input.ReadInt64(ref result.forceEndTurnTimestamp_);
              break;
            }
            case 24: {
              result.hasRemainMsec = input.ReadInt64(ref result.remainMsec_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasIsChecked {
        get { return result.hasIsChecked; }
      }
      public bool IsChecked {
        get { return result.IsChecked; }
        set { SetIsChecked(value); }
      }
      public Builder SetIsChecked(bool value) {
        PrepareBuilder();
        result.hasIsChecked = true;
        result.isChecked_ = value;
        return this;
      }
      public Builder ClearIsChecked() {
        PrepareBuilder();
        result.hasIsChecked = false;
        result.isChecked_ = false;
        return this;
      }
      
      public bool HasForceEndTurnTimestamp {
        get { return result.hasForceEndTurnTimestamp; }
      }
      public long ForceEndTurnTimestamp {
        get { return result.ForceEndTurnTimestamp; }
        set { SetForceEndTurnTimestamp(value); }
      }
      public Builder SetForceEndTurnTimestamp(long value) {
        PrepareBuilder();
        result.hasForceEndTurnTimestamp = true;
        result.forceEndTurnTimestamp_ = value;
        return this;
      }
      public Builder ClearForceEndTurnTimestamp() {
        PrepareBuilder();
        result.hasForceEndTurnTimestamp = false;
        result.forceEndTurnTimestamp_ = 0L;
        return this;
      }
      
      public bool HasRemainMsec {
        get { return result.hasRemainMsec; }
      }
      public long RemainMsec {
        get { return result.RemainMsec; }
        set { SetRemainMsec(value); }
      }
      public Builder SetRemainMsec(long value) {
        PrepareBuilder();
        result.hasRemainMsec = true;
        result.remainMsec_ = value;
        return this;
      }
      public Builder ClearRemainMsec() {
        PrepareBuilder();
        result.hasRemainMsec = false;
        result.remainMsec_ = 0L;
        return this;
      }
    }
    static ForceEndTurnResponse() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class ReadyToStartGameRequest : pb::GeneratedMessageLite<ReadyToStartGameRequest, ReadyToStartGameRequest.Builder> {
    private ReadyToStartGameRequest() { }
    private static readonly ReadyToStartGameRequest defaultInstance = new ReadyToStartGameRequest().MakeReadOnly();
    private static readonly string[] _readyToStartGameRequestFieldNames = new string[] {  };
    private static readonly uint[] _readyToStartGameRequestFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ReadyToStartGameRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ReadyToStartGameRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _readyToStartGameRequestFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ReadyToStartGameRequest other = obj as ReadyToStartGameRequest;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ReadyToStartGameRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ReadyToStartGameRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ReadyToStartGameRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ReadyToStartGameRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ReadyToStartGameRequest result;
      
      private ReadyToStartGameRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ReadyToStartGameRequest original = result;
          result = new ReadyToStartGameRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ReadyToStartGameRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ReadyToStartGameRequest DefaultInstanceForType {
        get { return global::org.zhangqi.proto.ReadyToStartGameRequest.DefaultInstance; }
      }
      
      public override ReadyToStartGameRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ReadyToStartGameRequest) {
          return MergeFrom((ReadyToStartGameRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ReadyToStartGameRequest other) {
        if (other == global::org.zhangqi.proto.ReadyToStartGameRequest.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_readyToStartGameRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _readyToStartGameRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static ReadyToStartGameRequest() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class ReadyToStartGameResponse : pb::GeneratedMessageLite<ReadyToStartGameResponse, ReadyToStartGameResponse.Builder> {
    private ReadyToStartGameResponse() { }
    private static readonly ReadyToStartGameResponse defaultInstance = new ReadyToStartGameResponse().MakeReadOnly();
    private static readonly string[] _readyToStartGameResponseFieldNames = new string[] {  };
    private static readonly uint[] _readyToStartGameResponseFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ReadyToStartGameResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ReadyToStartGameResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _readyToStartGameResponseFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ReadyToStartGameResponse other = obj as ReadyToStartGameResponse;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ReadyToStartGameResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ReadyToStartGameResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ReadyToStartGameResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ReadyToStartGameResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ReadyToStartGameResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ReadyToStartGameResponse result;
      
      private ReadyToStartGameResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ReadyToStartGameResponse original = result;
          result = new ReadyToStartGameResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ReadyToStartGameResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ReadyToStartGameResponse DefaultInstanceForType {
        get { return global::org.zhangqi.proto.ReadyToStartGameResponse.DefaultInstance; }
      }
      
      public override ReadyToStartGameResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ReadyToStartGameResponse) {
          return MergeFrom((ReadyToStartGameResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ReadyToStartGameResponse other) {
        if (other == global::org.zhangqi.proto.ReadyToStartGameResponse.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_readyToStartGameResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _readyToStartGameResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static ReadyToStartGameResponse() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class ForceReadyToStartGameRequest : pb::GeneratedMessageLite<ForceReadyToStartGameRequest, ForceReadyToStartGameRequest.Builder> {
    private ForceReadyToStartGameRequest() { }
    private static readonly ForceReadyToStartGameRequest defaultInstance = new ForceReadyToStartGameRequest().MakeReadOnly();
    private static readonly string[] _forceReadyToStartGameRequestFieldNames = new string[] {  };
    private static readonly uint[] _forceReadyToStartGameRequestFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ForceReadyToStartGameRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ForceReadyToStartGameRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _forceReadyToStartGameRequestFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ForceReadyToStartGameRequest other = obj as ForceReadyToStartGameRequest;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ForceReadyToStartGameRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ForceReadyToStartGameRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ForceReadyToStartGameRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ForceReadyToStartGameRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ForceReadyToStartGameRequest result;
      
      private ForceReadyToStartGameRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          ForceReadyToStartGameRequest original = result;
          result = new ForceReadyToStartGameRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ForceReadyToStartGameRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ForceReadyToStartGameRequest DefaultInstanceForType {
        get { return global::org.zhangqi.proto.ForceReadyToStartGameRequest.DefaultInstance; }
      }
      
      public override ForceReadyToStartGameRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ForceReadyToStartGameRequest) {
          return MergeFrom((ForceReadyToStartGameRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ForceReadyToStartGameRequest other) {
        if (other == global::org.zhangqi.proto.ForceReadyToStartGameRequest.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_forceReadyToStartGameRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _forceReadyToStartGameRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static ForceReadyToStartGameRequest() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class ForceReadyToStartGameResponse : pb::GeneratedMessageLite<ForceReadyToStartGameResponse, ForceReadyToStartGameResponse.Builder> {
    private ForceReadyToStartGameResponse() { }
    private static readonly ForceReadyToStartGameResponse defaultInstance = new ForceReadyToStartGameResponse().MakeReadOnly();
    private static readonly string[] _forceReadyToStartGameResponseFieldNames = new string[] { "forceStartGameTimestamp", "isChecked", "remainMsec" };
    private static readonly uint[] _forceReadyToStartGameResponseFieldTags = new uint[] { 16, 8, 24 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override ForceReadyToStartGameResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ForceReadyToStartGameResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IsCheckedFieldNumber = 1;
    private bool hasIsChecked;
    private bool isChecked_;
    public bool HasIsChecked {
      get { return hasIsChecked; }
    }
    public bool IsChecked {
      get { return isChecked_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ForceStartGameTimestampFieldNumber = 2;
    private bool hasForceStartGameTimestamp;
    private long forceStartGameTimestamp_;
    public bool HasForceStartGameTimestamp {
      get { return hasForceStartGameTimestamp; }
    }
    public long ForceStartGameTimestamp {
      get { return forceStartGameTimestamp_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int RemainMsecFieldNumber = 3;
    private bool hasRemainMsec;
    private long remainMsec_;
    public bool HasRemainMsec {
      get { return hasRemainMsec; }
    }
    public long RemainMsec {
      get { return remainMsec_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _forceReadyToStartGameResponseFieldNames;
      if (hasIsChecked) {
        output.WriteBool(1, field_names[1], IsChecked);
      }
      if (hasForceStartGameTimestamp) {
        output.WriteInt64(2, field_names[0], ForceStartGameTimestamp);
      }
      if (hasRemainMsec) {
        output.WriteInt64(3, field_names[2], RemainMsec);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasIsChecked) {
          size += pb::CodedOutputStream.ComputeBoolSize(1, IsChecked);
        }
        if (hasForceStartGameTimestamp) {
          size += pb::CodedOutputStream.ComputeInt64Size(2, ForceStartGameTimestamp);
        }
        if (hasRemainMsec) {
          size += pb::CodedOutputStream.ComputeInt64Size(3, RemainMsec);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasIsChecked) hash ^= isChecked_.GetHashCode();
      if (hasForceStartGameTimestamp) hash ^= forceStartGameTimestamp_.GetHashCode();
      if (hasRemainMsec) hash ^= remainMsec_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      ForceReadyToStartGameResponse other = obj as ForceReadyToStartGameResponse;
      if (other == null) return false;
      if (hasIsChecked != other.hasIsChecked || (hasIsChecked && !isChecked_.Equals(other.isChecked_))) return false;
      if (hasForceStartGameTimestamp != other.hasForceStartGameTimestamp || (hasForceStartGameTimestamp && !forceStartGameTimestamp_.Equals(other.forceStartGameTimestamp_))) return false;
      if (hasRemainMsec != other.hasRemainMsec || (hasRemainMsec && !remainMsec_.Equals(other.remainMsec_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static ForceReadyToStartGameResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ForceReadyToStartGameResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(ForceReadyToStartGameResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<ForceReadyToStartGameResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ForceReadyToStartGameResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ForceReadyToStartGameResponse result;
      
      private ForceReadyToStartGameResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          ForceReadyToStartGameResponse original = result;
          result = new ForceReadyToStartGameResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ForceReadyToStartGameResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override ForceReadyToStartGameResponse DefaultInstanceForType {
        get { return global::org.zhangqi.proto.ForceReadyToStartGameResponse.DefaultInstance; }
      }
      
      public override ForceReadyToStartGameResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is ForceReadyToStartGameResponse) {
          return MergeFrom((ForceReadyToStartGameResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ForceReadyToStartGameResponse other) {
        if (other == global::org.zhangqi.proto.ForceReadyToStartGameResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasIsChecked) {
          IsChecked = other.IsChecked;
        }
        if (other.HasForceStartGameTimestamp) {
          ForceStartGameTimestamp = other.ForceStartGameTimestamp;
        }
        if (other.HasRemainMsec) {
          RemainMsec = other.RemainMsec;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_forceReadyToStartGameResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _forceReadyToStartGameResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasIsChecked = input.ReadBool(ref result.isChecked_);
              break;
            }
            case 16: {
              result.hasForceStartGameTimestamp = input.ReadInt64(ref result.forceStartGameTimestamp_);
              break;
            }
            case 24: {
              result.hasRemainMsec = input.ReadInt64(ref result.remainMsec_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasIsChecked {
        get { return result.hasIsChecked; }
      }
      public bool IsChecked {
        get { return result.IsChecked; }
        set { SetIsChecked(value); }
      }
      public Builder SetIsChecked(bool value) {
        PrepareBuilder();
        result.hasIsChecked = true;
        result.isChecked_ = value;
        return this;
      }
      public Builder ClearIsChecked() {
        PrepareBuilder();
        result.hasIsChecked = false;
        result.isChecked_ = false;
        return this;
      }
      
      public bool HasForceStartGameTimestamp {
        get { return result.hasForceStartGameTimestamp; }
      }
      public long ForceStartGameTimestamp {
        get { return result.ForceStartGameTimestamp; }
        set { SetForceStartGameTimestamp(value); }
      }
      public Builder SetForceStartGameTimestamp(long value) {
        PrepareBuilder();
        result.hasForceStartGameTimestamp = true;
        result.forceStartGameTimestamp_ = value;
        return this;
      }
      public Builder ClearForceStartGameTimestamp() {
        PrepareBuilder();
        result.hasForceStartGameTimestamp = false;
        result.forceStartGameTimestamp_ = 0L;
        return this;
      }
      
      public bool HasRemainMsec {
        get { return result.hasRemainMsec; }
      }
      public long RemainMsec {
        get { return result.RemainMsec; }
        set { SetRemainMsec(value); }
      }
      public Builder SetRemainMsec(long value) {
        PrepareBuilder();
        result.hasRemainMsec = true;
        result.remainMsec_ = value;
        return this;
      }
      public Builder ClearRemainMsec() {
        PrepareBuilder();
        result.hasRemainMsec = false;
        result.remainMsec_ = 0L;
        return this;
      }
    }
    static ForceReadyToStartGameResponse() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class EventMsg : pb::GeneratedMessageLite<EventMsg, EventMsg.Builder> {
    private EventMsg() { }
    private static readonly EventMsg defaultInstance = new EventMsg().MakeReadOnly();
    private static readonly string[] _eventMsgFieldNames = new string[] { "endTurnEvent", "eventNum", "eventType", "gameOverEvent", "placePiecesEvent", "startTurnEvent" };
    private static readonly uint[] _eventMsgFieldTags = new uint[] { 66, 8, 16, 50, 74, 58 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsg DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override EventMsg DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EventMsg ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int EventNumFieldNumber = 1;
    private bool hasEventNum;
    private int eventNum_;
    public bool HasEventNum {
      get { return hasEventNum; }
    }
    public int EventNum {
      get { return eventNum_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int EventTypeFieldNumber = 2;
    private bool hasEventType;
    private global::org.zhangqi.proto.EventTypeEnum eventType_ = global::org.zhangqi.proto.EventTypeEnum.EventTypeGameOver;
    public bool HasEventType {
      get { return hasEventType; }
    }
    public global::org.zhangqi.proto.EventTypeEnum EventType {
      get { return eventType_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int GameOverEventFieldNumber = 6;
    private bool hasGameOverEvent;
    private global::org.zhangqi.proto.GameOverEvent gameOverEvent_;
    public bool HasGameOverEvent {
      get { return hasGameOverEvent; }
    }
    public global::org.zhangqi.proto.GameOverEvent GameOverEvent {
      get { return gameOverEvent_ ?? global::org.zhangqi.proto.GameOverEvent.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int StartTurnEventFieldNumber = 7;
    private bool hasStartTurnEvent;
    private global::org.zhangqi.proto.StartTurnEvent startTurnEvent_;
    public bool HasStartTurnEvent {
      get { return hasStartTurnEvent; }
    }
    public global::org.zhangqi.proto.StartTurnEvent StartTurnEvent {
      get { return startTurnEvent_ ?? global::org.zhangqi.proto.StartTurnEvent.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int EndTurnEventFieldNumber = 8;
    private bool hasEndTurnEvent;
    private global::org.zhangqi.proto.EndTurnEvent endTurnEvent_;
    public bool HasEndTurnEvent {
      get { return hasEndTurnEvent; }
    }
    public global::org.zhangqi.proto.EndTurnEvent EndTurnEvent {
      get { return endTurnEvent_ ?? global::org.zhangqi.proto.EndTurnEvent.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int PlacePiecesEventFieldNumber = 9;
    private bool hasPlacePiecesEvent;
    private global::org.zhangqi.proto.PlacePiecesEvent placePiecesEvent_;
    public bool HasPlacePiecesEvent {
      get { return hasPlacePiecesEvent; }
    }
    public global::org.zhangqi.proto.PlacePiecesEvent PlacePiecesEvent {
      get { return placePiecesEvent_ ?? global::org.zhangqi.proto.PlacePiecesEvent.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _eventMsgFieldNames;
      if (hasEventNum) {
        output.WriteInt32(1, field_names[1], EventNum);
      }
      if (hasEventType) {
        output.WriteEnum(2, field_names[2], (int) EventType, EventType);
      }
      if (hasGameOverEvent) {
        output.WriteMessage(6, field_names[3], GameOverEvent);
      }
      if (hasStartTurnEvent) {
        output.WriteMessage(7, field_names[5], StartTurnEvent);
      }
      if (hasEndTurnEvent) {
        output.WriteMessage(8, field_names[0], EndTurnEvent);
      }
      if (hasPlacePiecesEvent) {
        output.WriteMessage(9, field_names[4], PlacePiecesEvent);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEventNum) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, EventNum);
        }
        if (hasEventType) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) EventType);
        }
        if (hasGameOverEvent) {
          size += pb::CodedOutputStream.ComputeMessageSize(6, GameOverEvent);
        }
        if (hasStartTurnEvent) {
          size += pb::CodedOutputStream.ComputeMessageSize(7, StartTurnEvent);
        }
        if (hasEndTurnEvent) {
          size += pb::CodedOutputStream.ComputeMessageSize(8, EndTurnEvent);
        }
        if (hasPlacePiecesEvent) {
          size += pb::CodedOutputStream.ComputeMessageSize(9, PlacePiecesEvent);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasEventNum) hash ^= eventNum_.GetHashCode();
      if (hasEventType) hash ^= eventType_.GetHashCode();
      if (hasGameOverEvent) hash ^= gameOverEvent_.GetHashCode();
      if (hasStartTurnEvent) hash ^= startTurnEvent_.GetHashCode();
      if (hasEndTurnEvent) hash ^= endTurnEvent_.GetHashCode();
      if (hasPlacePiecesEvent) hash ^= placePiecesEvent_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      EventMsg other = obj as EventMsg;
      if (other == null) return false;
      if (hasEventNum != other.hasEventNum || (hasEventNum && !eventNum_.Equals(other.eventNum_))) return false;
      if (hasEventType != other.hasEventType || (hasEventType && !eventType_.Equals(other.eventType_))) return false;
      if (hasGameOverEvent != other.hasGameOverEvent || (hasGameOverEvent && !gameOverEvent_.Equals(other.gameOverEvent_))) return false;
      if (hasStartTurnEvent != other.hasStartTurnEvent || (hasStartTurnEvent && !startTurnEvent_.Equals(other.startTurnEvent_))) return false;
      if (hasEndTurnEvent != other.hasEndTurnEvent || (hasEndTurnEvent && !endTurnEvent_.Equals(other.endTurnEvent_))) return false;
      if (hasPlacePiecesEvent != other.hasPlacePiecesEvent || (hasPlacePiecesEvent && !placePiecesEvent_.Equals(other.placePiecesEvent_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsg ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsg ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsg ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsg ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsg ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EventMsg MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(EventMsg prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<EventMsg, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EventMsg cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EventMsg result;
      
      private EventMsg PrepareBuilder() {
        if (resultIsReadOnly) {
          EventMsg original = result;
          result = new EventMsg();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EventMsg MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override EventMsg DefaultInstanceForType {
        get { return global::org.zhangqi.proto.EventMsg.DefaultInstance; }
      }
      
      public override EventMsg BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is EventMsg) {
          return MergeFrom((EventMsg) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EventMsg other) {
        if (other == global::org.zhangqi.proto.EventMsg.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEventNum) {
          EventNum = other.EventNum;
        }
        if (other.HasEventType) {
          EventType = other.EventType;
        }
        if (other.HasGameOverEvent) {
          MergeGameOverEvent(other.GameOverEvent);
        }
        if (other.HasStartTurnEvent) {
          MergeStartTurnEvent(other.StartTurnEvent);
        }
        if (other.HasEndTurnEvent) {
          MergeEndTurnEvent(other.EndTurnEvent);
        }
        if (other.HasPlacePiecesEvent) {
          MergePlacePiecesEvent(other.PlacePiecesEvent);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_eventMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _eventMsgFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEventNum = input.ReadInt32(ref result.eventNum_);
              break;
            }
            case 16: {
              int number = 0;
              string str = null;
              if(input.ReadEnum(ref number, ref str)) {
                try {
                  if (str != null) {
                    result.eventType_ = (global::org.zhangqi.proto.EventTypeEnum)System.Enum.Parse(typeof(global::org.zhangqi.proto.EventTypeEnum), str);
                  } else {
                    result.eventType_ = (global::org.zhangqi.proto.EventTypeEnum)number;
                  }
                  result.hasEventType = true;
                }
                catch {
                }
              }
              break;
            }
            case 50: {
              global::org.zhangqi.proto.GameOverEvent.Builder subBuilder = global::org.zhangqi.proto.GameOverEvent.CreateBuilder();
              if (result.hasGameOverEvent) {
                subBuilder.MergeFrom(GameOverEvent);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameOverEvent = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::org.zhangqi.proto.StartTurnEvent.Builder subBuilder = global::org.zhangqi.proto.StartTurnEvent.CreateBuilder();
              if (result.hasStartTurnEvent) {
                subBuilder.MergeFrom(StartTurnEvent);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              StartTurnEvent = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::org.zhangqi.proto.EndTurnEvent.Builder subBuilder = global::org.zhangqi.proto.EndTurnEvent.CreateBuilder();
              if (result.hasEndTurnEvent) {
                subBuilder.MergeFrom(EndTurnEvent);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EndTurnEvent = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::org.zhangqi.proto.PlacePiecesEvent.Builder subBuilder = global::org.zhangqi.proto.PlacePiecesEvent.CreateBuilder();
              if (result.hasPlacePiecesEvent) {
                subBuilder.MergeFrom(PlacePiecesEvent);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              PlacePiecesEvent = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasEventNum {
        get { return result.hasEventNum; }
      }
      public int EventNum {
        get { return result.EventNum; }
        set { SetEventNum(value); }
      }
      public Builder SetEventNum(int value) {
        PrepareBuilder();
        result.hasEventNum = true;
        result.eventNum_ = value;
        return this;
      }
      public Builder ClearEventNum() {
        PrepareBuilder();
        result.hasEventNum = false;
        result.eventNum_ = 0;
        return this;
      }
      
      public bool HasEventType {
       get { return result.hasEventType; }
      }
      public global::org.zhangqi.proto.EventTypeEnum EventType {
        get { return result.EventType; }
        set { SetEventType(value); }
      }
      public Builder SetEventType(global::org.zhangqi.proto.EventTypeEnum value) {
        PrepareBuilder();
        result.hasEventType = true;
        result.eventType_ = value;
        return this;
      }
      public Builder ClearEventType() {
        PrepareBuilder();
        result.hasEventType = false;
        result.eventType_ = global::org.zhangqi.proto.EventTypeEnum.EventTypeGameOver;
        return this;
      }
      
      public bool HasGameOverEvent {
       get { return result.hasGameOverEvent; }
      }
      public global::org.zhangqi.proto.GameOverEvent GameOverEvent {
        get { return result.GameOverEvent; }
        set { SetGameOverEvent(value); }
      }
      public Builder SetGameOverEvent(global::org.zhangqi.proto.GameOverEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameOverEvent = true;
        result.gameOverEvent_ = value;
        return this;
      }
      public Builder SetGameOverEvent(global::org.zhangqi.proto.GameOverEvent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameOverEvent = true;
        result.gameOverEvent_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameOverEvent(global::org.zhangqi.proto.GameOverEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameOverEvent &&
            result.gameOverEvent_ != global::org.zhangqi.proto.GameOverEvent.DefaultInstance) {
            result.gameOverEvent_ = global::org.zhangqi.proto.GameOverEvent.CreateBuilder(result.gameOverEvent_).MergeFrom(value).BuildPartial();
        } else {
          result.gameOverEvent_ = value;
        }
        result.hasGameOverEvent = true;
        return this;
      }
      public Builder ClearGameOverEvent() {
        PrepareBuilder();
        result.hasGameOverEvent = false;
        result.gameOverEvent_ = null;
        return this;
      }
      
      public bool HasStartTurnEvent {
       get { return result.hasStartTurnEvent; }
      }
      public global::org.zhangqi.proto.StartTurnEvent StartTurnEvent {
        get { return result.StartTurnEvent; }
        set { SetStartTurnEvent(value); }
      }
      public Builder SetStartTurnEvent(global::org.zhangqi.proto.StartTurnEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasStartTurnEvent = true;
        result.startTurnEvent_ = value;
        return this;
      }
      public Builder SetStartTurnEvent(global::org.zhangqi.proto.StartTurnEvent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasStartTurnEvent = true;
        result.startTurnEvent_ = builderForValue.Build();
        return this;
      }
      public Builder MergeStartTurnEvent(global::org.zhangqi.proto.StartTurnEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasStartTurnEvent &&
            result.startTurnEvent_ != global::org.zhangqi.proto.StartTurnEvent.DefaultInstance) {
            result.startTurnEvent_ = global::org.zhangqi.proto.StartTurnEvent.CreateBuilder(result.startTurnEvent_).MergeFrom(value).BuildPartial();
        } else {
          result.startTurnEvent_ = value;
        }
        result.hasStartTurnEvent = true;
        return this;
      }
      public Builder ClearStartTurnEvent() {
        PrepareBuilder();
        result.hasStartTurnEvent = false;
        result.startTurnEvent_ = null;
        return this;
      }
      
      public bool HasEndTurnEvent {
       get { return result.hasEndTurnEvent; }
      }
      public global::org.zhangqi.proto.EndTurnEvent EndTurnEvent {
        get { return result.EndTurnEvent; }
        set { SetEndTurnEvent(value); }
      }
      public Builder SetEndTurnEvent(global::org.zhangqi.proto.EndTurnEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEndTurnEvent = true;
        result.endTurnEvent_ = value;
        return this;
      }
      public Builder SetEndTurnEvent(global::org.zhangqi.proto.EndTurnEvent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEndTurnEvent = true;
        result.endTurnEvent_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEndTurnEvent(global::org.zhangqi.proto.EndTurnEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEndTurnEvent &&
            result.endTurnEvent_ != global::org.zhangqi.proto.EndTurnEvent.DefaultInstance) {
            result.endTurnEvent_ = global::org.zhangqi.proto.EndTurnEvent.CreateBuilder(result.endTurnEvent_).MergeFrom(value).BuildPartial();
        } else {
          result.endTurnEvent_ = value;
        }
        result.hasEndTurnEvent = true;
        return this;
      }
      public Builder ClearEndTurnEvent() {
        PrepareBuilder();
        result.hasEndTurnEvent = false;
        result.endTurnEvent_ = null;
        return this;
      }
      
      public bool HasPlacePiecesEvent {
       get { return result.hasPlacePiecesEvent; }
      }
      public global::org.zhangqi.proto.PlacePiecesEvent PlacePiecesEvent {
        get { return result.PlacePiecesEvent; }
        set { SetPlacePiecesEvent(value); }
      }
      public Builder SetPlacePiecesEvent(global::org.zhangqi.proto.PlacePiecesEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasPlacePiecesEvent = true;
        result.placePiecesEvent_ = value;
        return this;
      }
      public Builder SetPlacePiecesEvent(global::org.zhangqi.proto.PlacePiecesEvent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasPlacePiecesEvent = true;
        result.placePiecesEvent_ = builderForValue.Build();
        return this;
      }
      public Builder MergePlacePiecesEvent(global::org.zhangqi.proto.PlacePiecesEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasPlacePiecesEvent &&
            result.placePiecesEvent_ != global::org.zhangqi.proto.PlacePiecesEvent.DefaultInstance) {
            result.placePiecesEvent_ = global::org.zhangqi.proto.PlacePiecesEvent.CreateBuilder(result.placePiecesEvent_).MergeFrom(value).BuildPartial();
        } else {
          result.placePiecesEvent_ = value;
        }
        result.hasPlacePiecesEvent = true;
        return this;
      }
      public Builder ClearPlacePiecesEvent() {
        PrepareBuilder();
        result.hasPlacePiecesEvent = false;
        result.placePiecesEvent_ = null;
        return this;
      }
    }
    static EventMsg() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class EventMsgList : pb::GeneratedMessageLite<EventMsgList, EventMsgList.Builder> {
    private EventMsgList() { }
    private static readonly EventMsgList defaultInstance = new EventMsgList().MakeReadOnly();
    private static readonly string[] _eventMsgListFieldNames = new string[] { "msgList" };
    private static readonly uint[] _eventMsgListFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsgList DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override EventMsgList DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EventMsgList ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int MsgListFieldNumber = 1;
    private pbc::PopsicleList<global::org.zhangqi.proto.EventMsg> msgList_ = new pbc::PopsicleList<global::org.zhangqi.proto.EventMsg>();
    public scg::IList<global::org.zhangqi.proto.EventMsg> MsgListList {
      get { return msgList_; }
    }
    public int MsgListCount {
      get { return msgList_.Count; }
    }
    public global::org.zhangqi.proto.EventMsg GetMsgList(int index) {
      return msgList_[index];
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _eventMsgListFieldNames;
      if (msgList_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], msgList_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        foreach (global::org.zhangqi.proto.EventMsg element in MsgListList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, element);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      foreach(global::org.zhangqi.proto.EventMsg i in msgList_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      EventMsgList other = obj as EventMsgList;
      if (other == null) return false;
      if(msgList_.Count != other.msgList_.Count) return false;
      for(int ix=0; ix < msgList_.Count; ix++)
        if(!msgList_[ix].Equals(other.msgList_[ix])) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsgList ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsgList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsgList ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsgList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsgList ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsgList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsgList ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsgList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsgList ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EventMsgList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EventMsgList MakeReadOnly() {
      msgList_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(EventMsgList prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<EventMsgList, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EventMsgList cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EventMsgList result;
      
      private EventMsgList PrepareBuilder() {
        if (resultIsReadOnly) {
          EventMsgList original = result;
          result = new EventMsgList();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EventMsgList MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override EventMsgList DefaultInstanceForType {
        get { return global::org.zhangqi.proto.EventMsgList.DefaultInstance; }
      }
      
      public override EventMsgList BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is EventMsgList) {
          return MergeFrom((EventMsgList) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EventMsgList other) {
        if (other == global::org.zhangqi.proto.EventMsgList.DefaultInstance) return this;
        PrepareBuilder();
        if (other.msgList_.Count != 0) {
          result.msgList_.Add(other.msgList_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_eventMsgListFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _eventMsgListFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.msgList_, global::org.zhangqi.proto.EventMsg.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public pbc::IPopsicleList<global::org.zhangqi.proto.EventMsg> MsgListList {
        get { return PrepareBuilder().msgList_; }
      }
      public int MsgListCount {
        get { return result.MsgListCount; }
      }
      public global::org.zhangqi.proto.EventMsg GetMsgList(int index) {
        return result.GetMsgList(index);
      }
      public Builder SetMsgList(int index, global::org.zhangqi.proto.EventMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.msgList_[index] = value;
        return this;
      }
      public Builder SetMsgList(int index, global::org.zhangqi.proto.EventMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.msgList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddMsgList(global::org.zhangqi.proto.EventMsg value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.msgList_.Add(value);
        return this;
      }
      public Builder AddMsgList(global::org.zhangqi.proto.EventMsg.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.msgList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeMsgList(scg::IEnumerable<global::org.zhangqi.proto.EventMsg> values) {
        PrepareBuilder();
        result.msgList_.Add(values);
        return this;
      }
      public Builder ClearMsgList() {
        PrepareBuilder();
        result.msgList_.Clear();
        return this;
      }
    }
    static EventMsgList() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class GameOverEvent : pb::GeneratedMessageLite<GameOverEvent, GameOverEvent.Builder> {
    private GameOverEvent() { }
    private static readonly GameOverEvent defaultInstance = new GameOverEvent().MakeReadOnly();
    private static readonly string[] _gameOverEventFieldNames = new string[] { "gameOverReason", "winnerUserId" };
    private static readonly uint[] _gameOverEventFieldTags = new uint[] { 16, 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GameOverEvent DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override GameOverEvent DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameOverEvent ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int WinnerUserIdFieldNumber = 1;
    private bool hasWinnerUserId;
    private int winnerUserId_;
    public bool HasWinnerUserId {
      get { return hasWinnerUserId; }
    }
    public int WinnerUserId {
      get { return winnerUserId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int GameOverReasonFieldNumber = 2;
    private bool hasGameOverReason;
    private global::org.zhangqi.proto.GameOverReasonEnum gameOverReason_ = global::org.zhangqi.proto.GameOverReasonEnum.GameOverPlayerWin;
    public bool HasGameOverReason {
      get { return hasGameOverReason; }
    }
    public global::org.zhangqi.proto.GameOverReasonEnum GameOverReason {
      get { return gameOverReason_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gameOverEventFieldNames;
      if (hasWinnerUserId) {
        output.WriteInt32(1, field_names[1], WinnerUserId);
      }
      if (hasGameOverReason) {
        output.WriteEnum(2, field_names[0], (int) GameOverReason, GameOverReason);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasWinnerUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, WinnerUserId);
        }
        if (hasGameOverReason) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) GameOverReason);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasWinnerUserId) hash ^= winnerUserId_.GetHashCode();
      if (hasGameOverReason) hash ^= gameOverReason_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      GameOverEvent other = obj as GameOverEvent;
      if (other == null) return false;
      if (hasWinnerUserId != other.hasWinnerUserId || (hasWinnerUserId && !winnerUserId_.Equals(other.winnerUserId_))) return false;
      if (hasGameOverReason != other.hasGameOverReason || (hasGameOverReason && !gameOverReason_.Equals(other.gameOverReason_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GameOverEvent ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GameOverEvent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GameOverEvent ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GameOverEvent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GameOverEvent ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GameOverEvent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GameOverEvent ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GameOverEvent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GameOverEvent ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GameOverEvent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameOverEvent MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(GameOverEvent prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<GameOverEvent, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameOverEvent cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameOverEvent result;
      
      private GameOverEvent PrepareBuilder() {
        if (resultIsReadOnly) {
          GameOverEvent original = result;
          result = new GameOverEvent();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameOverEvent MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override GameOverEvent DefaultInstanceForType {
        get { return global::org.zhangqi.proto.GameOverEvent.DefaultInstance; }
      }
      
      public override GameOverEvent BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is GameOverEvent) {
          return MergeFrom((GameOverEvent) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameOverEvent other) {
        if (other == global::org.zhangqi.proto.GameOverEvent.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasWinnerUserId) {
          WinnerUserId = other.WinnerUserId;
        }
        if (other.HasGameOverReason) {
          GameOverReason = other.GameOverReason;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameOverEventFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameOverEventFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasWinnerUserId = input.ReadInt32(ref result.winnerUserId_);
              break;
            }
            case 16: {
              int number = 0;
              string str = null;
              if(input.ReadEnum(ref number, ref str)) {
                try {
                  if (str != null) {
                    result.gameOverReason_ = (global::org.zhangqi.proto.GameOverReasonEnum)System.Enum.Parse(typeof(global::org.zhangqi.proto.GameOverReasonEnum), str);
                  } else {
                    result.gameOverReason_ = (global::org.zhangqi.proto.GameOverReasonEnum)number;
                  }
                  result.hasGameOverReason = true;
                }
                catch {
                }
              }
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasWinnerUserId {
        get { return result.hasWinnerUserId; }
      }
      public int WinnerUserId {
        get { return result.WinnerUserId; }
        set { SetWinnerUserId(value); }
      }
      public Builder SetWinnerUserId(int value) {
        PrepareBuilder();
        result.hasWinnerUserId = true;
        result.winnerUserId_ = value;
        return this;
      }
      public Builder ClearWinnerUserId() {
        PrepareBuilder();
        result.hasWinnerUserId = false;
        result.winnerUserId_ = 0;
        return this;
      }
      
      public bool HasGameOverReason {
       get { return result.hasGameOverReason; }
      }
      public global::org.zhangqi.proto.GameOverReasonEnum GameOverReason {
        get { return result.GameOverReason; }
        set { SetGameOverReason(value); }
      }
      public Builder SetGameOverReason(global::org.zhangqi.proto.GameOverReasonEnum value) {
        PrepareBuilder();
        result.hasGameOverReason = true;
        result.gameOverReason_ = value;
        return this;
      }
      public Builder ClearGameOverReason() {
        PrepareBuilder();
        result.hasGameOverReason = false;
        result.gameOverReason_ = global::org.zhangqi.proto.GameOverReasonEnum.GameOverPlayerWin;
        return this;
      }
    }
    static GameOverEvent() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class StartTurnEvent : pb::GeneratedMessageLite<StartTurnEvent, StartTurnEvent.Builder> {
    private StartTurnEvent() { }
    private static readonly StartTurnEvent defaultInstance = new StartTurnEvent().MakeReadOnly();
    private static readonly string[] _startTurnEventFieldNames = new string[] { "currentTurnInfo" };
    private static readonly uint[] _startTurnEventFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static StartTurnEvent DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override StartTurnEvent DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override StartTurnEvent ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int CurrentTurnInfoFieldNumber = 1;
    private bool hasCurrentTurnInfo;
    private global::org.zhangqi.proto.CurrentTurnInfo currentTurnInfo_;
    public bool HasCurrentTurnInfo {
      get { return hasCurrentTurnInfo; }
    }
    public global::org.zhangqi.proto.CurrentTurnInfo CurrentTurnInfo {
      get { return currentTurnInfo_ ?? global::org.zhangqi.proto.CurrentTurnInfo.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _startTurnEventFieldNames;
      if (hasCurrentTurnInfo) {
        output.WriteMessage(1, field_names[0], CurrentTurnInfo);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCurrentTurnInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, CurrentTurnInfo);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasCurrentTurnInfo) hash ^= currentTurnInfo_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      StartTurnEvent other = obj as StartTurnEvent;
      if (other == null) return false;
      if (hasCurrentTurnInfo != other.hasCurrentTurnInfo || (hasCurrentTurnInfo && !currentTurnInfo_.Equals(other.currentTurnInfo_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static StartTurnEvent ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static StartTurnEvent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static StartTurnEvent ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static StartTurnEvent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static StartTurnEvent ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static StartTurnEvent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static StartTurnEvent ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static StartTurnEvent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static StartTurnEvent ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static StartTurnEvent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private StartTurnEvent MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(StartTurnEvent prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<StartTurnEvent, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(StartTurnEvent cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private StartTurnEvent result;
      
      private StartTurnEvent PrepareBuilder() {
        if (resultIsReadOnly) {
          StartTurnEvent original = result;
          result = new StartTurnEvent();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override StartTurnEvent MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override StartTurnEvent DefaultInstanceForType {
        get { return global::org.zhangqi.proto.StartTurnEvent.DefaultInstance; }
      }
      
      public override StartTurnEvent BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is StartTurnEvent) {
          return MergeFrom((StartTurnEvent) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(StartTurnEvent other) {
        if (other == global::org.zhangqi.proto.StartTurnEvent.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCurrentTurnInfo) {
          MergeCurrentTurnInfo(other.CurrentTurnInfo);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_startTurnEventFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _startTurnEventFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::org.zhangqi.proto.CurrentTurnInfo.Builder subBuilder = global::org.zhangqi.proto.CurrentTurnInfo.CreateBuilder();
              if (result.hasCurrentTurnInfo) {
                subBuilder.MergeFrom(CurrentTurnInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              CurrentTurnInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasCurrentTurnInfo {
       get { return result.hasCurrentTurnInfo; }
      }
      public global::org.zhangqi.proto.CurrentTurnInfo CurrentTurnInfo {
        get { return result.CurrentTurnInfo; }
        set { SetCurrentTurnInfo(value); }
      }
      public Builder SetCurrentTurnInfo(global::org.zhangqi.proto.CurrentTurnInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasCurrentTurnInfo = true;
        result.currentTurnInfo_ = value;
        return this;
      }
      public Builder SetCurrentTurnInfo(global::org.zhangqi.proto.CurrentTurnInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasCurrentTurnInfo = true;
        result.currentTurnInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeCurrentTurnInfo(global::org.zhangqi.proto.CurrentTurnInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasCurrentTurnInfo &&
            result.currentTurnInfo_ != global::org.zhangqi.proto.CurrentTurnInfo.DefaultInstance) {
            result.currentTurnInfo_ = global::org.zhangqi.proto.CurrentTurnInfo.CreateBuilder(result.currentTurnInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.currentTurnInfo_ = value;
        }
        result.hasCurrentTurnInfo = true;
        return this;
      }
      public Builder ClearCurrentTurnInfo() {
        PrepareBuilder();
        result.hasCurrentTurnInfo = false;
        result.currentTurnInfo_ = null;
        return this;
      }
    }
    static StartTurnEvent() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class EndTurnEvent : pb::GeneratedMessageLite<EndTurnEvent, EndTurnEvent.Builder> {
    private EndTurnEvent() { }
    private static readonly EndTurnEvent defaultInstance = new EndTurnEvent().MakeReadOnly();
    private static readonly string[] _endTurnEventFieldNames = new string[] { "endTurnUserId", "isForceEndTurn" };
    private static readonly uint[] _endTurnEventFieldTags = new uint[] { 8, 16 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EndTurnEvent DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override EndTurnEvent DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override EndTurnEvent ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int EndTurnUserIdFieldNumber = 1;
    private bool hasEndTurnUserId;
    private int endTurnUserId_;
    public bool HasEndTurnUserId {
      get { return hasEndTurnUserId; }
    }
    public int EndTurnUserId {
      get { return endTurnUserId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IsForceEndTurnFieldNumber = 2;
    private bool hasIsForceEndTurn;
    private bool isForceEndTurn_;
    public bool HasIsForceEndTurn {
      get { return hasIsForceEndTurn; }
    }
    public bool IsForceEndTurn {
      get { return isForceEndTurn_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _endTurnEventFieldNames;
      if (hasEndTurnUserId) {
        output.WriteInt32(1, field_names[0], EndTurnUserId);
      }
      if (hasIsForceEndTurn) {
        output.WriteBool(2, field_names[1], IsForceEndTurn);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEndTurnUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, EndTurnUserId);
        }
        if (hasIsForceEndTurn) {
          size += pb::CodedOutputStream.ComputeBoolSize(2, IsForceEndTurn);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasEndTurnUserId) hash ^= endTurnUserId_.GetHashCode();
      if (hasIsForceEndTurn) hash ^= isForceEndTurn_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      EndTurnEvent other = obj as EndTurnEvent;
      if (other == null) return false;
      if (hasEndTurnUserId != other.hasEndTurnUserId || (hasEndTurnUserId && !endTurnUserId_.Equals(other.endTurnUserId_))) return false;
      if (hasIsForceEndTurn != other.hasIsForceEndTurn || (hasIsForceEndTurn && !isForceEndTurn_.Equals(other.isForceEndTurn_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EndTurnEvent ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EndTurnEvent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EndTurnEvent ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EndTurnEvent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EndTurnEvent ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EndTurnEvent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EndTurnEvent ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EndTurnEvent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EndTurnEvent ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static EndTurnEvent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private EndTurnEvent MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(EndTurnEvent prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<EndTurnEvent, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(EndTurnEvent cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private EndTurnEvent result;
      
      private EndTurnEvent PrepareBuilder() {
        if (resultIsReadOnly) {
          EndTurnEvent original = result;
          result = new EndTurnEvent();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override EndTurnEvent MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override EndTurnEvent DefaultInstanceForType {
        get { return global::org.zhangqi.proto.EndTurnEvent.DefaultInstance; }
      }
      
      public override EndTurnEvent BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is EndTurnEvent) {
          return MergeFrom((EndTurnEvent) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(EndTurnEvent other) {
        if (other == global::org.zhangqi.proto.EndTurnEvent.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEndTurnUserId) {
          EndTurnUserId = other.EndTurnUserId;
        }
        if (other.HasIsForceEndTurn) {
          IsForceEndTurn = other.IsForceEndTurn;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_endTurnEventFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _endTurnEventFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasEndTurnUserId = input.ReadInt32(ref result.endTurnUserId_);
              break;
            }
            case 16: {
              result.hasIsForceEndTurn = input.ReadBool(ref result.isForceEndTurn_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasEndTurnUserId {
        get { return result.hasEndTurnUserId; }
      }
      public int EndTurnUserId {
        get { return result.EndTurnUserId; }
        set { SetEndTurnUserId(value); }
      }
      public Builder SetEndTurnUserId(int value) {
        PrepareBuilder();
        result.hasEndTurnUserId = true;
        result.endTurnUserId_ = value;
        return this;
      }
      public Builder ClearEndTurnUserId() {
        PrepareBuilder();
        result.hasEndTurnUserId = false;
        result.endTurnUserId_ = 0;
        return this;
      }
      
      public bool HasIsForceEndTurn {
        get { return result.hasIsForceEndTurn; }
      }
      public bool IsForceEndTurn {
        get { return result.IsForceEndTurn; }
        set { SetIsForceEndTurn(value); }
      }
      public Builder SetIsForceEndTurn(bool value) {
        PrepareBuilder();
        result.hasIsForceEndTurn = true;
        result.isForceEndTurn_ = value;
        return this;
      }
      public Builder ClearIsForceEndTurn() {
        PrepareBuilder();
        result.hasIsForceEndTurn = false;
        result.isForceEndTurn_ = false;
        return this;
      }
    }
    static EndTurnEvent() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class PlacePiecesEvent : pb::GeneratedMessageLite<PlacePiecesEvent, PlacePiecesEvent.Builder> {
    private PlacePiecesEvent() { }
    private static readonly PlacePiecesEvent defaultInstance = new PlacePiecesEvent().MakeReadOnly();
    private static readonly string[] _placePiecesEventFieldNames = new string[] { "index", "userId" };
    private static readonly uint[] _placePiecesEventFieldTags = new uint[] { 16, 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesEvent DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override PlacePiecesEvent DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override PlacePiecesEvent ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IndexFieldNumber = 2;
    private bool hasIndex;
    private int index_;
    public bool HasIndex {
      get { return hasIndex; }
    }
    public int Index {
      get { return index_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _placePiecesEventFieldNames;
      if (hasUserId) {
        output.WriteInt32(1, field_names[1], UserId);
      }
      if (hasIndex) {
        output.WriteInt32(2, field_names[0], Index);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, UserId);
        }
        if (hasIndex) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, Index);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasUserId) hash ^= userId_.GetHashCode();
      if (hasIndex) hash ^= index_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      PlacePiecesEvent other = obj as PlacePiecesEvent;
      if (other == null) return false;
      if (hasUserId != other.hasUserId || (hasUserId && !userId_.Equals(other.userId_))) return false;
      if (hasIndex != other.hasIndex || (hasIndex && !index_.Equals(other.index_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesEvent ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesEvent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesEvent ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesEvent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesEvent ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesEvent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesEvent ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesEvent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesEvent ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static PlacePiecesEvent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private PlacePiecesEvent MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(PlacePiecesEvent prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<PlacePiecesEvent, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(PlacePiecesEvent cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private PlacePiecesEvent result;
      
      private PlacePiecesEvent PrepareBuilder() {
        if (resultIsReadOnly) {
          PlacePiecesEvent original = result;
          result = new PlacePiecesEvent();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override PlacePiecesEvent MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override PlacePiecesEvent DefaultInstanceForType {
        get { return global::org.zhangqi.proto.PlacePiecesEvent.DefaultInstance; }
      }
      
      public override PlacePiecesEvent BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is PlacePiecesEvent) {
          return MergeFrom((PlacePiecesEvent) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(PlacePiecesEvent other) {
        if (other == global::org.zhangqi.proto.PlacePiecesEvent.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasIndex) {
          Index = other.Index;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_placePiecesEventFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _placePiecesEventFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
            case 16: {
              result.hasIndex = input.ReadInt32(ref result.index_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
      
      public bool HasIndex {
        get { return result.hasIndex; }
      }
      public int Index {
        get { return result.Index; }
        set { SetIndex(value); }
      }
      public Builder SetIndex(int value) {
        PrepareBuilder();
        result.hasIndex = true;
        result.index_ = value;
        return this;
      }
      public Builder ClearIndex() {
        PrepareBuilder();
        result.hasIndex = false;
        result.index_ = 0;
        return this;
      }
    }
    static PlacePiecesEvent() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  public sealed partial class BattleEventMsgListPush : pb::GeneratedMessageLite<BattleEventMsgListPush, BattleEventMsgListPush.Builder> {
    private BattleEventMsgListPush() { }
    private static readonly BattleEventMsgListPush defaultInstance = new BattleEventMsgListPush().MakeReadOnly();
    private static readonly string[] _battleEventMsgListPushFieldNames = new string[] { "eventMsgList" };
    private static readonly uint[] _battleEventMsgListPushFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleEventMsgListPush DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override BattleEventMsgListPush DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BattleEventMsgListPush ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int EventMsgListFieldNumber = 1;
    private bool hasEventMsgList;
    private global::org.zhangqi.proto.EventMsgList eventMsgList_;
    public bool HasEventMsgList {
      get { return hasEventMsgList; }
    }
    public global::org.zhangqi.proto.EventMsgList EventMsgList {
      get { return eventMsgList_ ?? global::org.zhangqi.proto.EventMsgList.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _battleEventMsgListPushFieldNames;
      if (hasEventMsgList) {
        output.WriteMessage(1, field_names[0], EventMsgList);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasEventMsgList) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, EventMsgList);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasEventMsgList) hash ^= eventMsgList_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      BattleEventMsgListPush other = obj as BattleEventMsgListPush;
      if (other == null) return false;
      if (hasEventMsgList != other.hasEventMsgList || (hasEventMsgList && !eventMsgList_.Equals(other.eventMsgList_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleEventMsgListPush ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleEventMsgListPush ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleEventMsgListPush ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleEventMsgListPush ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleEventMsgListPush ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleEventMsgListPush ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleEventMsgListPush ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleEventMsgListPush ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleEventMsgListPush ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleEventMsgListPush ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BattleEventMsgListPush MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(BattleEventMsgListPush prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<BattleEventMsgListPush, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BattleEventMsgListPush cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BattleEventMsgListPush result;
      
      private BattleEventMsgListPush PrepareBuilder() {
        if (resultIsReadOnly) {
          BattleEventMsgListPush original = result;
          result = new BattleEventMsgListPush();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BattleEventMsgListPush MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override BattleEventMsgListPush DefaultInstanceForType {
        get { return global::org.zhangqi.proto.BattleEventMsgListPush.DefaultInstance; }
      }
      
      public override BattleEventMsgListPush BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is BattleEventMsgListPush) {
          return MergeFrom((BattleEventMsgListPush) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BattleEventMsgListPush other) {
        if (other == global::org.zhangqi.proto.BattleEventMsgListPush.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasEventMsgList) {
          MergeEventMsgList(other.EventMsgList);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_battleEventMsgListPushFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _battleEventMsgListPushFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::org.zhangqi.proto.EventMsgList.Builder subBuilder = global::org.zhangqi.proto.EventMsgList.CreateBuilder();
              if (result.hasEventMsgList) {
                subBuilder.MergeFrom(EventMsgList);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              EventMsgList = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasEventMsgList {
       get { return result.hasEventMsgList; }
      }
      public global::org.zhangqi.proto.EventMsgList EventMsgList {
        get { return result.EventMsgList; }
        set { SetEventMsgList(value); }
      }
      public Builder SetEventMsgList(global::org.zhangqi.proto.EventMsgList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasEventMsgList = true;
        result.eventMsgList_ = value;
        return this;
      }
      public Builder SetEventMsgList(global::org.zhangqi.proto.EventMsgList.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasEventMsgList = true;
        result.eventMsgList_ = builderForValue.Build();
        return this;
      }
      public Builder MergeEventMsgList(global::org.zhangqi.proto.EventMsgList value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasEventMsgList &&
            result.eventMsgList_ != global::org.zhangqi.proto.EventMsgList.DefaultInstance) {
            result.eventMsgList_ = global::org.zhangqi.proto.EventMsgList.CreateBuilder(result.eventMsgList_).MergeFrom(value).BuildPartial();
        } else {
          result.eventMsgList_ = value;
        }
        result.hasEventMsgList = true;
        return this;
      }
      public Builder ClearEventMsgList() {
        PrepareBuilder();
        result.hasEventMsgList = false;
        result.eventMsgList_ = null;
        return this;
      }
    }
    static BattleEventMsgListPush() {
      object.ReferenceEquals(global::org.zhangqi.proto.BaseBattle.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
#pragma warning restore
