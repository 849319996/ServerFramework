// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=null.  DO NOT EDIT!
#pragma warning disable
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace org.zhangqi.proto {
  
  public static partial class RemoteServer {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    #endregion
    #region Extensions
    internal static readonly object Descriptor;
    static RemoteServer() {
      Descriptor = null;
    }
    #endregion
    
  }
  #region Enums
  public enum RemoteRpcNameEnum {
    RemoteRpcRegistServer = 400101,
    RemoteRpcNoticeExecuteGmCmd = 400102,
    RemoteRpcNoticeGmServerTextMsg = 400103,
    RemoteRpcNoticeBattleServerCreateNewBattle = 410101,
    RemoteRpcGatewayNoticeClientOfflinePush = 500001,
    RemoteRpcLogicServerNoticeGatewayForceOfflineClient = 500002,
  }
  
  public enum RemoteRpcErrorCodeEnum {
    RemoteRpcOk = 0,
    RemoteRpcServerError = 1,
    RemoteRpcRegistServerErrorHasRegisted = 4001011,
  }
  
  #endregion
  
  #region Messages
  public sealed partial class RemoteServerInfo : pb::GeneratedMessageLite<RemoteServerInfo, RemoteServerInfo.Builder> {
    private RemoteServerInfo() { }
    private static readonly RemoteServerInfo defaultInstance = new RemoteServerInfo().MakeReadOnly();
    private static readonly string[] _remoteServerInfoFieldNames = new string[] { "akkaPath", "gatewayConnectPath", "isMainLogicServer", "serverId", "serverType" };
    private static readonly uint[] _remoteServerInfoFieldTags = new uint[] { 18, 42, 32, 24, 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RemoteServerInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override RemoteServerInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RemoteServerInfo ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ServerTypeFieldNumber = 1;
    private bool hasServerType;
    private global::org.zhangqi.proto.RemoteServerTypeEnum serverType_ = global::org.zhangqi.proto.RemoteServerTypeEnum.ServerTypeLogic;
    public bool HasServerType {
      get { return hasServerType; }
    }
    public global::org.zhangqi.proto.RemoteServerTypeEnum ServerType {
      get { return serverType_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int AkkaPathFieldNumber = 2;
    private bool hasAkkaPath;
    private string akkaPath_ = "";
    public bool HasAkkaPath {
      get { return hasAkkaPath; }
    }
    public string AkkaPath {
      get { return akkaPath_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ServerIdFieldNumber = 3;
    private bool hasServerId;
    private int serverId_;
    public bool HasServerId {
      get { return hasServerId; }
    }
    public int ServerId {
      get { return serverId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IsMainLogicServerFieldNumber = 4;
    private bool hasIsMainLogicServer;
    private bool isMainLogicServer_;
    public bool HasIsMainLogicServer {
      get { return hasIsMainLogicServer; }
    }
    public bool IsMainLogicServer {
      get { return isMainLogicServer_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int GatewayConnectPathFieldNumber = 5;
    private bool hasGatewayConnectPath;
    private string gatewayConnectPath_ = "";
    public bool HasGatewayConnectPath {
      get { return hasGatewayConnectPath; }
    }
    public string GatewayConnectPath {
      get { return gatewayConnectPath_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _remoteServerInfoFieldNames;
      if (hasServerType) {
        output.WriteEnum(1, field_names[4], (int) ServerType, ServerType);
      }
      if (hasAkkaPath) {
        output.WriteString(2, field_names[0], AkkaPath);
      }
      if (hasServerId) {
        output.WriteInt32(3, field_names[3], ServerId);
      }
      if (hasIsMainLogicServer) {
        output.WriteBool(4, field_names[2], IsMainLogicServer);
      }
      if (hasGatewayConnectPath) {
        output.WriteString(5, field_names[1], GatewayConnectPath);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasServerType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) ServerType);
        }
        if (hasAkkaPath) {
          size += pb::CodedOutputStream.ComputeStringSize(2, AkkaPath);
        }
        if (hasServerId) {
          size += pb::CodedOutputStream.ComputeInt32Size(3, ServerId);
        }
        if (hasIsMainLogicServer) {
          size += pb::CodedOutputStream.ComputeBoolSize(4, IsMainLogicServer);
        }
        if (hasGatewayConnectPath) {
          size += pb::CodedOutputStream.ComputeStringSize(5, GatewayConnectPath);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasServerType) hash ^= serverType_.GetHashCode();
      if (hasAkkaPath) hash ^= akkaPath_.GetHashCode();
      if (hasServerId) hash ^= serverId_.GetHashCode();
      if (hasIsMainLogicServer) hash ^= isMainLogicServer_.GetHashCode();
      if (hasGatewayConnectPath) hash ^= gatewayConnectPath_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      RemoteServerInfo other = obj as RemoteServerInfo;
      if (other == null) return false;
      if (hasServerType != other.hasServerType || (hasServerType && !serverType_.Equals(other.serverType_))) return false;
      if (hasAkkaPath != other.hasAkkaPath || (hasAkkaPath && !akkaPath_.Equals(other.akkaPath_))) return false;
      if (hasServerId != other.hasServerId || (hasServerId && !serverId_.Equals(other.serverId_))) return false;
      if (hasIsMainLogicServer != other.hasIsMainLogicServer || (hasIsMainLogicServer && !isMainLogicServer_.Equals(other.isMainLogicServer_))) return false;
      if (hasGatewayConnectPath != other.hasGatewayConnectPath || (hasGatewayConnectPath && !gatewayConnectPath_.Equals(other.gatewayConnectPath_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RemoteServerInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RemoteServerInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RemoteServerInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RemoteServerInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RemoteServerInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RemoteServerInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RemoteServerInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RemoteServerInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RemoteServerInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RemoteServerInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RemoteServerInfo MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(RemoteServerInfo prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<RemoteServerInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RemoteServerInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RemoteServerInfo result;
      
      private RemoteServerInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          RemoteServerInfo original = result;
          result = new RemoteServerInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RemoteServerInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override RemoteServerInfo DefaultInstanceForType {
        get { return global::org.zhangqi.proto.RemoteServerInfo.DefaultInstance; }
      }
      
      public override RemoteServerInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is RemoteServerInfo) {
          return MergeFrom((RemoteServerInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RemoteServerInfo other) {
        if (other == global::org.zhangqi.proto.RemoteServerInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServerType) {
          ServerType = other.ServerType;
        }
        if (other.HasAkkaPath) {
          AkkaPath = other.AkkaPath;
        }
        if (other.HasServerId) {
          ServerId = other.ServerId;
        }
        if (other.HasIsMainLogicServer) {
          IsMainLogicServer = other.IsMainLogicServer;
        }
        if (other.HasGatewayConnectPath) {
          GatewayConnectPath = other.GatewayConnectPath;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_remoteServerInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _remoteServerInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              int number = 0;
              string str = null;
              if(input.ReadEnum(ref number, ref str)) {
                try {
                  if (str != null) {
                    result.serverType_ = (global::org.zhangqi.proto.RemoteServerTypeEnum)System.Enum.Parse(typeof(global::org.zhangqi.proto.RemoteServerTypeEnum), str);
                  } else {
                    result.serverType_ = (global::org.zhangqi.proto.RemoteServerTypeEnum)number;
                  }
                  result.hasServerType = true;
                }
                catch {
                }
              }
              break;
            }
            case 18: {
              result.hasAkkaPath = input.ReadString(ref result.akkaPath_);
              break;
            }
            case 24: {
              result.hasServerId = input.ReadInt32(ref result.serverId_);
              break;
            }
            case 32: {
              result.hasIsMainLogicServer = input.ReadBool(ref result.isMainLogicServer_);
              break;
            }
            case 42: {
              result.hasGatewayConnectPath = input.ReadString(ref result.gatewayConnectPath_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasServerType {
       get { return result.hasServerType; }
      }
      public global::org.zhangqi.proto.RemoteServerTypeEnum ServerType {
        get { return result.ServerType; }
        set { SetServerType(value); }
      }
      public Builder SetServerType(global::org.zhangqi.proto.RemoteServerTypeEnum value) {
        PrepareBuilder();
        result.hasServerType = true;
        result.serverType_ = value;
        return this;
      }
      public Builder ClearServerType() {
        PrepareBuilder();
        result.hasServerType = false;
        result.serverType_ = global::org.zhangqi.proto.RemoteServerTypeEnum.ServerTypeLogic;
        return this;
      }
      
      public bool HasAkkaPath {
        get { return result.hasAkkaPath; }
      }
      public string AkkaPath {
        get { return result.AkkaPath; }
        set { SetAkkaPath(value); }
      }
      public Builder SetAkkaPath(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasAkkaPath = true;
        result.akkaPath_ = value;
        return this;
      }
      public Builder ClearAkkaPath() {
        PrepareBuilder();
        result.hasAkkaPath = false;
        result.akkaPath_ = "";
        return this;
      }
      
      public bool HasServerId {
        get { return result.hasServerId; }
      }
      public int ServerId {
        get { return result.ServerId; }
        set { SetServerId(value); }
      }
      public Builder SetServerId(int value) {
        PrepareBuilder();
        result.hasServerId = true;
        result.serverId_ = value;
        return this;
      }
      public Builder ClearServerId() {
        PrepareBuilder();
        result.hasServerId = false;
        result.serverId_ = 0;
        return this;
      }
      
      public bool HasIsMainLogicServer {
        get { return result.hasIsMainLogicServer; }
      }
      public bool IsMainLogicServer {
        get { return result.IsMainLogicServer; }
        set { SetIsMainLogicServer(value); }
      }
      public Builder SetIsMainLogicServer(bool value) {
        PrepareBuilder();
        result.hasIsMainLogicServer = true;
        result.isMainLogicServer_ = value;
        return this;
      }
      public Builder ClearIsMainLogicServer() {
        PrepareBuilder();
        result.hasIsMainLogicServer = false;
        result.isMainLogicServer_ = false;
        return this;
      }
      
      public bool HasGatewayConnectPath {
        get { return result.hasGatewayConnectPath; }
      }
      public string GatewayConnectPath {
        get { return result.GatewayConnectPath; }
        set { SetGatewayConnectPath(value); }
      }
      public Builder SetGatewayConnectPath(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGatewayConnectPath = true;
        result.gatewayConnectPath_ = value;
        return this;
      }
      public Builder ClearGatewayConnectPath() {
        PrepareBuilder();
        result.hasGatewayConnectPath = false;
        result.gatewayConnectPath_ = "";
        return this;
      }
    }
    static RemoteServerInfo() {
      object.ReferenceEquals(global::org.zhangqi.proto.RemoteServer.Descriptor, null);
    }
  }
  
  public sealed partial class RegistServerRequest : pb::GeneratedMessageLite<RegistServerRequest, RegistServerRequest.Builder> {
    private RegistServerRequest() { }
    private static readonly RegistServerRequest defaultInstance = new RegistServerRequest().MakeReadOnly();
    private static readonly string[] _registServerRequestFieldNames = new string[] { "serverInfo" };
    private static readonly uint[] _registServerRequestFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override RegistServerRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RegistServerRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ServerInfoFieldNumber = 1;
    private bool hasServerInfo;
    private global::org.zhangqi.proto.RemoteServerInfo serverInfo_;
    public bool HasServerInfo {
      get { return hasServerInfo; }
    }
    public global::org.zhangqi.proto.RemoteServerInfo ServerInfo {
      get { return serverInfo_ ?? global::org.zhangqi.proto.RemoteServerInfo.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _registServerRequestFieldNames;
      if (hasServerInfo) {
        output.WriteMessage(1, field_names[0], ServerInfo);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasServerInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, ServerInfo);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasServerInfo) hash ^= serverInfo_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      RegistServerRequest other = obj as RegistServerRequest;
      if (other == null) return false;
      if (hasServerInfo != other.hasServerInfo || (hasServerInfo && !serverInfo_.Equals(other.serverInfo_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RegistServerRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(RegistServerRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<RegistServerRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RegistServerRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RegistServerRequest result;
      
      private RegistServerRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          RegistServerRequest original = result;
          result = new RegistServerRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RegistServerRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override RegistServerRequest DefaultInstanceForType {
        get { return global::org.zhangqi.proto.RegistServerRequest.DefaultInstance; }
      }
      
      public override RegistServerRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is RegistServerRequest) {
          return MergeFrom((RegistServerRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RegistServerRequest other) {
        if (other == global::org.zhangqi.proto.RegistServerRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServerInfo) {
          MergeServerInfo(other.ServerInfo);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_registServerRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _registServerRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::org.zhangqi.proto.RemoteServerInfo.Builder subBuilder = global::org.zhangqi.proto.RemoteServerInfo.CreateBuilder();
              if (result.hasServerInfo) {
                subBuilder.MergeFrom(ServerInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              ServerInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasServerInfo {
       get { return result.hasServerInfo; }
      }
      public global::org.zhangqi.proto.RemoteServerInfo ServerInfo {
        get { return result.ServerInfo; }
        set { SetServerInfo(value); }
      }
      public Builder SetServerInfo(global::org.zhangqi.proto.RemoteServerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasServerInfo = true;
        result.serverInfo_ = value;
        return this;
      }
      public Builder SetServerInfo(global::org.zhangqi.proto.RemoteServerInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasServerInfo = true;
        result.serverInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeServerInfo(global::org.zhangqi.proto.RemoteServerInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasServerInfo &&
            result.serverInfo_ != global::org.zhangqi.proto.RemoteServerInfo.DefaultInstance) {
            result.serverInfo_ = global::org.zhangqi.proto.RemoteServerInfo.CreateBuilder(result.serverInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.serverInfo_ = value;
        }
        result.hasServerInfo = true;
        return this;
      }
      public Builder ClearServerInfo() {
        PrepareBuilder();
        result.hasServerInfo = false;
        result.serverInfo_ = null;
        return this;
      }
    }
    static RegistServerRequest() {
      object.ReferenceEquals(global::org.zhangqi.proto.RemoteServer.Descriptor, null);
    }
  }
  
  public sealed partial class RegistServerResponse : pb::GeneratedMessageLite<RegistServerResponse, RegistServerResponse.Builder> {
    private RegistServerResponse() { }
    private static readonly RegistServerResponse defaultInstance = new RegistServerResponse().MakeReadOnly();
    private static readonly string[] _registServerResponseFieldNames = new string[] {  };
    private static readonly uint[] _registServerResponseFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override RegistServerResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RegistServerResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _registServerResponseFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      RegistServerResponse other = obj as RegistServerResponse;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static RegistServerResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RegistServerResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(RegistServerResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<RegistServerResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RegistServerResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RegistServerResponse result;
      
      private RegistServerResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          RegistServerResponse original = result;
          result = new RegistServerResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RegistServerResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override RegistServerResponse DefaultInstanceForType {
        get { return global::org.zhangqi.proto.RegistServerResponse.DefaultInstance; }
      }
      
      public override RegistServerResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is RegistServerResponse) {
          return MergeFrom((RegistServerResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RegistServerResponse other) {
        if (other == global::org.zhangqi.proto.RegistServerResponse.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_registServerResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _registServerResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static RegistServerResponse() {
      object.ReferenceEquals(global::org.zhangqi.proto.RemoteServer.Descriptor, null);
    }
  }
  
  public sealed partial class NoticeExecuteGmCmdRequest : pb::GeneratedMessageLite<NoticeExecuteGmCmdRequest, NoticeExecuteGmCmdRequest.Builder> {
    private NoticeExecuteGmCmdRequest() { }
    private static readonly NoticeExecuteGmCmdRequest defaultInstance = new NoticeExecuteGmCmdRequest().MakeReadOnly();
    private static readonly string[] _noticeExecuteGmCmdRequestFieldNames = new string[] { "cmdType", "params" };
    private static readonly uint[] _noticeExecuteGmCmdRequestFieldTags = new uint[] { 8, 18 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override NoticeExecuteGmCmdRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NoticeExecuteGmCmdRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int CmdTypeFieldNumber = 1;
    private bool hasCmdType;
    private global::org.zhangqi.proto.GmCmdTypeEnum cmdType_ = global::org.zhangqi.proto.GmCmdTypeEnum.GmCmdReloadTableConfig;
    public bool HasCmdType {
      get { return hasCmdType; }
    }
    public global::org.zhangqi.proto.GmCmdTypeEnum CmdType {
      get { return cmdType_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ParamsFieldNumber = 2;
    private pbc::PopsicleList<string> params_ = new pbc::PopsicleList<string>();
    public scg::IList<string> ParamsList {
      get { return pbc::Lists.AsReadOnly(params_); }
    }
    public int ParamsCount {
      get { return params_.Count; }
    }
    public string GetParams(int index) {
      return params_[index];
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _noticeExecuteGmCmdRequestFieldNames;
      if (hasCmdType) {
        output.WriteEnum(1, field_names[0], (int) CmdType, CmdType);
      }
      if (params_.Count > 0) {
        output.WriteStringArray(2, field_names[1], params_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasCmdType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) CmdType);
        }
        {
          int dataSize = 0;
          foreach (string element in ParamsList) {
            dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
          }
          size += dataSize;
          size += 1 * params_.Count;
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasCmdType) hash ^= cmdType_.GetHashCode();
      foreach(string i in params_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      NoticeExecuteGmCmdRequest other = obj as NoticeExecuteGmCmdRequest;
      if (other == null) return false;
      if (hasCmdType != other.hasCmdType || (hasCmdType && !cmdType_.Equals(other.cmdType_))) return false;
      if(params_.Count != other.params_.Count) return false;
      for(int ix=0; ix < params_.Count; ix++)
        if(!params_[ix].Equals(other.params_[ix])) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NoticeExecuteGmCmdRequest MakeReadOnly() {
      params_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(NoticeExecuteGmCmdRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<NoticeExecuteGmCmdRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NoticeExecuteGmCmdRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NoticeExecuteGmCmdRequest result;
      
      private NoticeExecuteGmCmdRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NoticeExecuteGmCmdRequest original = result;
          result = new NoticeExecuteGmCmdRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NoticeExecuteGmCmdRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override NoticeExecuteGmCmdRequest DefaultInstanceForType {
        get { return global::org.zhangqi.proto.NoticeExecuteGmCmdRequest.DefaultInstance; }
      }
      
      public override NoticeExecuteGmCmdRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is NoticeExecuteGmCmdRequest) {
          return MergeFrom((NoticeExecuteGmCmdRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NoticeExecuteGmCmdRequest other) {
        if (other == global::org.zhangqi.proto.NoticeExecuteGmCmdRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCmdType) {
          CmdType = other.CmdType;
        }
        if (other.params_.Count != 0) {
          result.params_.Add(other.params_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_noticeExecuteGmCmdRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _noticeExecuteGmCmdRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              int number = 0;
              string str = null;
              if(input.ReadEnum(ref number, ref str)) {
                try {
                  if (str != null) {
                    result.cmdType_ = (global::org.zhangqi.proto.GmCmdTypeEnum)System.Enum.Parse(typeof(global::org.zhangqi.proto.GmCmdTypeEnum), str);
                  } else {
                    result.cmdType_ = (global::org.zhangqi.proto.GmCmdTypeEnum)number;
                  }
                  result.hasCmdType = true;
                }
                catch {
                }
              }
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.params_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasCmdType {
       get { return result.hasCmdType; }
      }
      public global::org.zhangqi.proto.GmCmdTypeEnum CmdType {
        get { return result.CmdType; }
        set { SetCmdType(value); }
      }
      public Builder SetCmdType(global::org.zhangqi.proto.GmCmdTypeEnum value) {
        PrepareBuilder();
        result.hasCmdType = true;
        result.cmdType_ = value;
        return this;
      }
      public Builder ClearCmdType() {
        PrepareBuilder();
        result.hasCmdType = false;
        result.cmdType_ = global::org.zhangqi.proto.GmCmdTypeEnum.GmCmdReloadTableConfig;
        return this;
      }
      
      public pbc::IPopsicleList<string> ParamsList {
        get { return PrepareBuilder().params_; }
      }
      public int ParamsCount {
        get { return result.ParamsCount; }
      }
      public string GetParams(int index) {
        return result.GetParams(index);
      }
      public Builder SetParams(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.params_[index] = value;
        return this;
      }
      public Builder AddParams(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.params_.Add(value);
        return this;
      }
      public Builder AddRangeParams(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.params_.Add(values);
        return this;
      }
      public Builder ClearParams() {
        PrepareBuilder();
        result.params_.Clear();
        return this;
      }
    }
    static NoticeExecuteGmCmdRequest() {
      object.ReferenceEquals(global::org.zhangqi.proto.RemoteServer.Descriptor, null);
    }
  }
  
  public sealed partial class NoticeExecuteGmCmdResponse : pb::GeneratedMessageLite<NoticeExecuteGmCmdResponse, NoticeExecuteGmCmdResponse.Builder> {
    private NoticeExecuteGmCmdResponse() { }
    private static readonly NoticeExecuteGmCmdResponse defaultInstance = new NoticeExecuteGmCmdResponse().MakeReadOnly();
    private static readonly string[] _noticeExecuteGmCmdResponseFieldNames = new string[] {  };
    private static readonly uint[] _noticeExecuteGmCmdResponseFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override NoticeExecuteGmCmdResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NoticeExecuteGmCmdResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _noticeExecuteGmCmdResponseFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      NoticeExecuteGmCmdResponse other = obj as NoticeExecuteGmCmdResponse;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeExecuteGmCmdResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NoticeExecuteGmCmdResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(NoticeExecuteGmCmdResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<NoticeExecuteGmCmdResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NoticeExecuteGmCmdResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NoticeExecuteGmCmdResponse result;
      
      private NoticeExecuteGmCmdResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NoticeExecuteGmCmdResponse original = result;
          result = new NoticeExecuteGmCmdResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NoticeExecuteGmCmdResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override NoticeExecuteGmCmdResponse DefaultInstanceForType {
        get { return global::org.zhangqi.proto.NoticeExecuteGmCmdResponse.DefaultInstance; }
      }
      
      public override NoticeExecuteGmCmdResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is NoticeExecuteGmCmdResponse) {
          return MergeFrom((NoticeExecuteGmCmdResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NoticeExecuteGmCmdResponse other) {
        if (other == global::org.zhangqi.proto.NoticeExecuteGmCmdResponse.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_noticeExecuteGmCmdResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _noticeExecuteGmCmdResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static NoticeExecuteGmCmdResponse() {
      object.ReferenceEquals(global::org.zhangqi.proto.RemoteServer.Descriptor, null);
    }
  }
  
  public sealed partial class NoticeGmServerTextMsgRequest : pb::GeneratedMessageLite<NoticeGmServerTextMsgRequest, NoticeGmServerTextMsgRequest.Builder> {
    private NoticeGmServerTextMsgRequest() { }
    private static readonly NoticeGmServerTextMsgRequest defaultInstance = new NoticeGmServerTextMsgRequest().MakeReadOnly();
    private static readonly string[] _noticeGmServerTextMsgRequestFieldNames = new string[] { "serverId", "serverType", "text" };
    private static readonly uint[] _noticeGmServerTextMsgRequestFieldTags = new uint[] { 16, 8, 26 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override NoticeGmServerTextMsgRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NoticeGmServerTextMsgRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ServerTypeFieldNumber = 1;
    private bool hasServerType;
    private global::org.zhangqi.proto.RemoteServerTypeEnum serverType_ = global::org.zhangqi.proto.RemoteServerTypeEnum.ServerTypeLogic;
    public bool HasServerType {
      get { return hasServerType; }
    }
    public global::org.zhangqi.proto.RemoteServerTypeEnum ServerType {
      get { return serverType_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ServerIdFieldNumber = 2;
    private bool hasServerId;
    private int serverId_;
    public bool HasServerId {
      get { return hasServerId; }
    }
    public int ServerId {
      get { return serverId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int TextFieldNumber = 3;
    private bool hasText;
    private string text_ = "";
    public bool HasText {
      get { return hasText; }
    }
    public string Text {
      get { return text_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _noticeGmServerTextMsgRequestFieldNames;
      if (hasServerType) {
        output.WriteEnum(1, field_names[1], (int) ServerType, ServerType);
      }
      if (hasServerId) {
        output.WriteInt32(2, field_names[0], ServerId);
      }
      if (hasText) {
        output.WriteString(3, field_names[2], Text);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasServerType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) ServerType);
        }
        if (hasServerId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, ServerId);
        }
        if (hasText) {
          size += pb::CodedOutputStream.ComputeStringSize(3, Text);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasServerType) hash ^= serverType_.GetHashCode();
      if (hasServerId) hash ^= serverId_.GetHashCode();
      if (hasText) hash ^= text_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      NoticeGmServerTextMsgRequest other = obj as NoticeGmServerTextMsgRequest;
      if (other == null) return false;
      if (hasServerType != other.hasServerType || (hasServerType && !serverType_.Equals(other.serverType_))) return false;
      if (hasServerId != other.hasServerId || (hasServerId && !serverId_.Equals(other.serverId_))) return false;
      if (hasText != other.hasText || (hasText && !text_.Equals(other.text_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NoticeGmServerTextMsgRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(NoticeGmServerTextMsgRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<NoticeGmServerTextMsgRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NoticeGmServerTextMsgRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NoticeGmServerTextMsgRequest result;
      
      private NoticeGmServerTextMsgRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NoticeGmServerTextMsgRequest original = result;
          result = new NoticeGmServerTextMsgRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NoticeGmServerTextMsgRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override NoticeGmServerTextMsgRequest DefaultInstanceForType {
        get { return global::org.zhangqi.proto.NoticeGmServerTextMsgRequest.DefaultInstance; }
      }
      
      public override NoticeGmServerTextMsgRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is NoticeGmServerTextMsgRequest) {
          return MergeFrom((NoticeGmServerTextMsgRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NoticeGmServerTextMsgRequest other) {
        if (other == global::org.zhangqi.proto.NoticeGmServerTextMsgRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasServerType) {
          ServerType = other.ServerType;
        }
        if (other.HasServerId) {
          ServerId = other.ServerId;
        }
        if (other.HasText) {
          Text = other.Text;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_noticeGmServerTextMsgRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _noticeGmServerTextMsgRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              int number = 0;
              string str = null;
              if(input.ReadEnum(ref number, ref str)) {
                try {
                  if (str != null) {
                    result.serverType_ = (global::org.zhangqi.proto.RemoteServerTypeEnum)System.Enum.Parse(typeof(global::org.zhangqi.proto.RemoteServerTypeEnum), str);
                  } else {
                    result.serverType_ = (global::org.zhangqi.proto.RemoteServerTypeEnum)number;
                  }
                  result.hasServerType = true;
                }
                catch {
                }
              }
              break;
            }
            case 16: {
              result.hasServerId = input.ReadInt32(ref result.serverId_);
              break;
            }
            case 26: {
              result.hasText = input.ReadString(ref result.text_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasServerType {
       get { return result.hasServerType; }
      }
      public global::org.zhangqi.proto.RemoteServerTypeEnum ServerType {
        get { return result.ServerType; }
        set { SetServerType(value); }
      }
      public Builder SetServerType(global::org.zhangqi.proto.RemoteServerTypeEnum value) {
        PrepareBuilder();
        result.hasServerType = true;
        result.serverType_ = value;
        return this;
      }
      public Builder ClearServerType() {
        PrepareBuilder();
        result.hasServerType = false;
        result.serverType_ = global::org.zhangqi.proto.RemoteServerTypeEnum.ServerTypeLogic;
        return this;
      }
      
      public bool HasServerId {
        get { return result.hasServerId; }
      }
      public int ServerId {
        get { return result.ServerId; }
        set { SetServerId(value); }
      }
      public Builder SetServerId(int value) {
        PrepareBuilder();
        result.hasServerId = true;
        result.serverId_ = value;
        return this;
      }
      public Builder ClearServerId() {
        PrepareBuilder();
        result.hasServerId = false;
        result.serverId_ = 0;
        return this;
      }
      
      public bool HasText {
        get { return result.hasText; }
      }
      public string Text {
        get { return result.Text; }
        set { SetText(value); }
      }
      public Builder SetText(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasText = true;
        result.text_ = value;
        return this;
      }
      public Builder ClearText() {
        PrepareBuilder();
        result.hasText = false;
        result.text_ = "";
        return this;
      }
    }
    static NoticeGmServerTextMsgRequest() {
      object.ReferenceEquals(global::org.zhangqi.proto.RemoteServer.Descriptor, null);
    }
  }
  
  public sealed partial class NoticeGmServerTextMsgResponse : pb::GeneratedMessageLite<NoticeGmServerTextMsgResponse, NoticeGmServerTextMsgResponse.Builder> {
    private NoticeGmServerTextMsgResponse() { }
    private static readonly NoticeGmServerTextMsgResponse defaultInstance = new NoticeGmServerTextMsgResponse().MakeReadOnly();
    private static readonly string[] _noticeGmServerTextMsgResponseFieldNames = new string[] {  };
    private static readonly uint[] _noticeGmServerTextMsgResponseFieldTags = new uint[] {  };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override NoticeGmServerTextMsgResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NoticeGmServerTextMsgResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _noticeGmServerTextMsgResponseFieldNames;
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      NoticeGmServerTextMsgResponse other = obj as NoticeGmServerTextMsgResponse;
      if (other == null) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeGmServerTextMsgResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NoticeGmServerTextMsgResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(NoticeGmServerTextMsgResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<NoticeGmServerTextMsgResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NoticeGmServerTextMsgResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NoticeGmServerTextMsgResponse result;
      
      private NoticeGmServerTextMsgResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NoticeGmServerTextMsgResponse original = result;
          result = new NoticeGmServerTextMsgResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NoticeGmServerTextMsgResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override NoticeGmServerTextMsgResponse DefaultInstanceForType {
        get { return global::org.zhangqi.proto.NoticeGmServerTextMsgResponse.DefaultInstance; }
      }
      
      public override NoticeGmServerTextMsgResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is NoticeGmServerTextMsgResponse) {
          return MergeFrom((NoticeGmServerTextMsgResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NoticeGmServerTextMsgResponse other) {
        if (other == global::org.zhangqi.proto.NoticeGmServerTextMsgResponse.DefaultInstance) return this;
        PrepareBuilder();
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_noticeGmServerTextMsgResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _noticeGmServerTextMsgResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        return this;
      }
      
    }
    static NoticeGmServerTextMsgResponse() {
      object.ReferenceEquals(global::org.zhangqi.proto.RemoteServer.Descriptor, null);
    }
  }
  
  public sealed partial class BattleRoomInfo : pb::GeneratedMessageLite<BattleRoomInfo, BattleRoomInfo.Builder> {
    private BattleRoomInfo() { }
    private static readonly BattleRoomInfo defaultInstance = new BattleRoomInfo().MakeReadOnly();
    private static readonly string[] _battleRoomInfoFieldNames = new string[] { "battleId", "battleType", "userIds" };
    private static readonly uint[] _battleRoomInfoFieldTags = new uint[] { 18, 8, 24 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRoomInfo DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override BattleRoomInfo DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override BattleRoomInfo ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BattleTypeFieldNumber = 1;
    private bool hasBattleType;
    private global::org.zhangqi.proto.BattleTypeEnum battleType_ = global::org.zhangqi.proto.BattleTypeEnum.BattleTypeTwoPlayer;
    public bool HasBattleType {
      get { return hasBattleType; }
    }
    public global::org.zhangqi.proto.BattleTypeEnum BattleType {
      get { return battleType_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BattleIdFieldNumber = 2;
    private bool hasBattleId;
    private string battleId_ = "";
    public bool HasBattleId {
      get { return hasBattleId; }
    }
    public string BattleId {
      get { return battleId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UserIdsFieldNumber = 3;
    private pbc::PopsicleList<int> userIds_ = new pbc::PopsicleList<int>();
    public scg::IList<int> UserIdsList {
      get { return pbc::Lists.AsReadOnly(userIds_); }
    }
    public int UserIdsCount {
      get { return userIds_.Count; }
    }
    public int GetUserIds(int index) {
      return userIds_[index];
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _battleRoomInfoFieldNames;
      if (hasBattleType) {
        output.WriteEnum(1, field_names[1], (int) BattleType, BattleType);
      }
      if (hasBattleId) {
        output.WriteString(2, field_names[0], BattleId);
      }
      if (userIds_.Count > 0) {
        output.WriteInt32Array(3, field_names[2], userIds_);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBattleType) {
          size += pb::CodedOutputStream.ComputeEnumSize(1, (int) BattleType);
        }
        if (hasBattleId) {
          size += pb::CodedOutputStream.ComputeStringSize(2, BattleId);
        }
        {
          int dataSize = 0;
          foreach (int element in UserIdsList) {
            dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
          }
          size += dataSize;
          size += 1 * userIds_.Count;
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasBattleType) hash ^= battleType_.GetHashCode();
      if (hasBattleId) hash ^= battleId_.GetHashCode();
      foreach(int i in userIds_)
        hash ^= i.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      BattleRoomInfo other = obj as BattleRoomInfo;
      if (other == null) return false;
      if (hasBattleType != other.hasBattleType || (hasBattleType && !battleType_.Equals(other.battleType_))) return false;
      if (hasBattleId != other.hasBattleId || (hasBattleId && !battleId_.Equals(other.battleId_))) return false;
      if(userIds_.Count != other.userIds_.Count) return false;
      for(int ix=0; ix < userIds_.Count; ix++)
        if(!userIds_[ix].Equals(other.userIds_[ix])) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRoomInfo ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRoomInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRoomInfo ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRoomInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRoomInfo ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRoomInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRoomInfo ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRoomInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRoomInfo ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static BattleRoomInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private BattleRoomInfo MakeReadOnly() {
      userIds_.MakeReadOnly();
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(BattleRoomInfo prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<BattleRoomInfo, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(BattleRoomInfo cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private BattleRoomInfo result;
      
      private BattleRoomInfo PrepareBuilder() {
        if (resultIsReadOnly) {
          BattleRoomInfo original = result;
          result = new BattleRoomInfo();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override BattleRoomInfo MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override BattleRoomInfo DefaultInstanceForType {
        get { return global::org.zhangqi.proto.BattleRoomInfo.DefaultInstance; }
      }
      
      public override BattleRoomInfo BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is BattleRoomInfo) {
          return MergeFrom((BattleRoomInfo) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(BattleRoomInfo other) {
        if (other == global::org.zhangqi.proto.BattleRoomInfo.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBattleType) {
          BattleType = other.BattleType;
        }
        if (other.HasBattleId) {
          BattleId = other.BattleId;
        }
        if (other.userIds_.Count != 0) {
          result.userIds_.Add(other.userIds_);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_battleRoomInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _battleRoomInfoFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              int number = 0;
              string str = null;
              if(input.ReadEnum(ref number, ref str)) {
                try {
                  if (str != null) {
                    result.battleType_ = (global::org.zhangqi.proto.BattleTypeEnum)System.Enum.Parse(typeof(global::org.zhangqi.proto.BattleTypeEnum), str);
                  } else {
                    result.battleType_ = (global::org.zhangqi.proto.BattleTypeEnum)number;
                  }
                  result.hasBattleType = true;
                }
                catch {
                }
              }
              break;
            }
            case 18: {
              result.hasBattleId = input.ReadString(ref result.battleId_);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.userIds_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasBattleType {
       get { return result.hasBattleType; }
      }
      public global::org.zhangqi.proto.BattleTypeEnum BattleType {
        get { return result.BattleType; }
        set { SetBattleType(value); }
      }
      public Builder SetBattleType(global::org.zhangqi.proto.BattleTypeEnum value) {
        PrepareBuilder();
        result.hasBattleType = true;
        result.battleType_ = value;
        return this;
      }
      public Builder ClearBattleType() {
        PrepareBuilder();
        result.hasBattleType = false;
        result.battleType_ = global::org.zhangqi.proto.BattleTypeEnum.BattleTypeTwoPlayer;
        return this;
      }
      
      public bool HasBattleId {
        get { return result.hasBattleId; }
      }
      public string BattleId {
        get { return result.BattleId; }
        set { SetBattleId(value); }
      }
      public Builder SetBattleId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBattleId = true;
        result.battleId_ = value;
        return this;
      }
      public Builder ClearBattleId() {
        PrepareBuilder();
        result.hasBattleId = false;
        result.battleId_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<int> UserIdsList {
        get { return PrepareBuilder().userIds_; }
      }
      public int UserIdsCount {
        get { return result.UserIdsCount; }
      }
      public int GetUserIds(int index) {
        return result.GetUserIds(index);
      }
      public Builder SetUserIds(int index, int value) {
        PrepareBuilder();
        result.userIds_[index] = value;
        return this;
      }
      public Builder AddUserIds(int value) {
        PrepareBuilder();
        result.userIds_.Add(value);
        return this;
      }
      public Builder AddRangeUserIds(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.userIds_.Add(values);
        return this;
      }
      public Builder ClearUserIds() {
        PrepareBuilder();
        result.userIds_.Clear();
        return this;
      }
    }
    static BattleRoomInfo() {
      object.ReferenceEquals(global::org.zhangqi.proto.RemoteServer.Descriptor, null);
    }
  }
  
  public sealed partial class NoticeBattleServerCreateNewBattleRequest : pb::GeneratedMessageLite<NoticeBattleServerCreateNewBattleRequest, NoticeBattleServerCreateNewBattleRequest.Builder> {
    private NoticeBattleServerCreateNewBattleRequest() { }
    private static readonly NoticeBattleServerCreateNewBattleRequest defaultInstance = new NoticeBattleServerCreateNewBattleRequest().MakeReadOnly();
    private static readonly string[] _noticeBattleServerCreateNewBattleRequestFieldNames = new string[] { "battleRoomInfo" };
    private static readonly uint[] _noticeBattleServerCreateNewBattleRequestFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleRequest DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override NoticeBattleServerCreateNewBattleRequest DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NoticeBattleServerCreateNewBattleRequest ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BattleRoomInfoFieldNumber = 1;
    private bool hasBattleRoomInfo;
    private global::org.zhangqi.proto.BattleRoomInfo battleRoomInfo_;
    public bool HasBattleRoomInfo {
      get { return hasBattleRoomInfo; }
    }
    public global::org.zhangqi.proto.BattleRoomInfo BattleRoomInfo {
      get { return battleRoomInfo_ ?? global::org.zhangqi.proto.BattleRoomInfo.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _noticeBattleServerCreateNewBattleRequestFieldNames;
      if (hasBattleRoomInfo) {
        output.WriteMessage(1, field_names[0], BattleRoomInfo);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBattleRoomInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BattleRoomInfo);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasBattleRoomInfo) hash ^= battleRoomInfo_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      NoticeBattleServerCreateNewBattleRequest other = obj as NoticeBattleServerCreateNewBattleRequest;
      if (other == null) return false;
      if (hasBattleRoomInfo != other.hasBattleRoomInfo || (hasBattleRoomInfo && !battleRoomInfo_.Equals(other.battleRoomInfo_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleRequest ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleRequest ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleRequest ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleRequest ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleRequest ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NoticeBattleServerCreateNewBattleRequest MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(NoticeBattleServerCreateNewBattleRequest prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<NoticeBattleServerCreateNewBattleRequest, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NoticeBattleServerCreateNewBattleRequest cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NoticeBattleServerCreateNewBattleRequest result;
      
      private NoticeBattleServerCreateNewBattleRequest PrepareBuilder() {
        if (resultIsReadOnly) {
          NoticeBattleServerCreateNewBattleRequest original = result;
          result = new NoticeBattleServerCreateNewBattleRequest();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NoticeBattleServerCreateNewBattleRequest MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override NoticeBattleServerCreateNewBattleRequest DefaultInstanceForType {
        get { return global::org.zhangqi.proto.NoticeBattleServerCreateNewBattleRequest.DefaultInstance; }
      }
      
      public override NoticeBattleServerCreateNewBattleRequest BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is NoticeBattleServerCreateNewBattleRequest) {
          return MergeFrom((NoticeBattleServerCreateNewBattleRequest) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NoticeBattleServerCreateNewBattleRequest other) {
        if (other == global::org.zhangqi.proto.NoticeBattleServerCreateNewBattleRequest.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBattleRoomInfo) {
          MergeBattleRoomInfo(other.BattleRoomInfo);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_noticeBattleServerCreateNewBattleRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _noticeBattleServerCreateNewBattleRequestFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::org.zhangqi.proto.BattleRoomInfo.Builder subBuilder = global::org.zhangqi.proto.BattleRoomInfo.CreateBuilder();
              if (result.hasBattleRoomInfo) {
                subBuilder.MergeFrom(BattleRoomInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BattleRoomInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasBattleRoomInfo {
       get { return result.hasBattleRoomInfo; }
      }
      public global::org.zhangqi.proto.BattleRoomInfo BattleRoomInfo {
        get { return result.BattleRoomInfo; }
        set { SetBattleRoomInfo(value); }
      }
      public Builder SetBattleRoomInfo(global::org.zhangqi.proto.BattleRoomInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBattleRoomInfo = true;
        result.battleRoomInfo_ = value;
        return this;
      }
      public Builder SetBattleRoomInfo(global::org.zhangqi.proto.BattleRoomInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBattleRoomInfo = true;
        result.battleRoomInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBattleRoomInfo(global::org.zhangqi.proto.BattleRoomInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBattleRoomInfo &&
            result.battleRoomInfo_ != global::org.zhangqi.proto.BattleRoomInfo.DefaultInstance) {
            result.battleRoomInfo_ = global::org.zhangqi.proto.BattleRoomInfo.CreateBuilder(result.battleRoomInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.battleRoomInfo_ = value;
        }
        result.hasBattleRoomInfo = true;
        return this;
      }
      public Builder ClearBattleRoomInfo() {
        PrepareBuilder();
        result.hasBattleRoomInfo = false;
        result.battleRoomInfo_ = null;
        return this;
      }
    }
    static NoticeBattleServerCreateNewBattleRequest() {
      object.ReferenceEquals(global::org.zhangqi.proto.RemoteServer.Descriptor, null);
    }
  }
  
  public sealed partial class NoticeBattleServerCreateNewBattleResponse : pb::GeneratedMessageLite<NoticeBattleServerCreateNewBattleResponse, NoticeBattleServerCreateNewBattleResponse.Builder> {
    private NoticeBattleServerCreateNewBattleResponse() { }
    private static readonly NoticeBattleServerCreateNewBattleResponse defaultInstance = new NoticeBattleServerCreateNewBattleResponse().MakeReadOnly();
    private static readonly string[] _noticeBattleServerCreateNewBattleResponseFieldNames = new string[] { "battleRoomInfo" };
    private static readonly uint[] _noticeBattleServerCreateNewBattleResponseFieldTags = new uint[] { 10 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleResponse DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override NoticeBattleServerCreateNewBattleResponse DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override NoticeBattleServerCreateNewBattleResponse ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int BattleRoomInfoFieldNumber = 1;
    private bool hasBattleRoomInfo;
    private global::org.zhangqi.proto.BattleRoomInfo battleRoomInfo_;
    public bool HasBattleRoomInfo {
      get { return hasBattleRoomInfo; }
    }
    public global::org.zhangqi.proto.BattleRoomInfo BattleRoomInfo {
      get { return battleRoomInfo_ ?? global::org.zhangqi.proto.BattleRoomInfo.DefaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _noticeBattleServerCreateNewBattleResponseFieldNames;
      if (hasBattleRoomInfo) {
        output.WriteMessage(1, field_names[0], BattleRoomInfo);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasBattleRoomInfo) {
          size += pb::CodedOutputStream.ComputeMessageSize(1, BattleRoomInfo);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasBattleRoomInfo) hash ^= battleRoomInfo_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      NoticeBattleServerCreateNewBattleResponse other = obj as NoticeBattleServerCreateNewBattleResponse;
      if (other == null) return false;
      if (hasBattleRoomInfo != other.hasBattleRoomInfo || (hasBattleRoomInfo && !battleRoomInfo_.Equals(other.battleRoomInfo_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleResponse ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleResponse ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleResponse ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleResponse ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleResponse ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static NoticeBattleServerCreateNewBattleResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private NoticeBattleServerCreateNewBattleResponse MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(NoticeBattleServerCreateNewBattleResponse prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<NoticeBattleServerCreateNewBattleResponse, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(NoticeBattleServerCreateNewBattleResponse cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private NoticeBattleServerCreateNewBattleResponse result;
      
      private NoticeBattleServerCreateNewBattleResponse PrepareBuilder() {
        if (resultIsReadOnly) {
          NoticeBattleServerCreateNewBattleResponse original = result;
          result = new NoticeBattleServerCreateNewBattleResponse();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override NoticeBattleServerCreateNewBattleResponse MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override NoticeBattleServerCreateNewBattleResponse DefaultInstanceForType {
        get { return global::org.zhangqi.proto.NoticeBattleServerCreateNewBattleResponse.DefaultInstance; }
      }
      
      public override NoticeBattleServerCreateNewBattleResponse BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is NoticeBattleServerCreateNewBattleResponse) {
          return MergeFrom((NoticeBattleServerCreateNewBattleResponse) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(NoticeBattleServerCreateNewBattleResponse other) {
        if (other == global::org.zhangqi.proto.NoticeBattleServerCreateNewBattleResponse.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasBattleRoomInfo) {
          MergeBattleRoomInfo(other.BattleRoomInfo);
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_noticeBattleServerCreateNewBattleResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _noticeBattleServerCreateNewBattleResponseFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::org.zhangqi.proto.BattleRoomInfo.Builder subBuilder = global::org.zhangqi.proto.BattleRoomInfo.CreateBuilder();
              if (result.hasBattleRoomInfo) {
                subBuilder.MergeFrom(BattleRoomInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              BattleRoomInfo = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasBattleRoomInfo {
       get { return result.hasBattleRoomInfo; }
      }
      public global::org.zhangqi.proto.BattleRoomInfo BattleRoomInfo {
        get { return result.BattleRoomInfo; }
        set { SetBattleRoomInfo(value); }
      }
      public Builder SetBattleRoomInfo(global::org.zhangqi.proto.BattleRoomInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasBattleRoomInfo = true;
        result.battleRoomInfo_ = value;
        return this;
      }
      public Builder SetBattleRoomInfo(global::org.zhangqi.proto.BattleRoomInfo.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasBattleRoomInfo = true;
        result.battleRoomInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeBattleRoomInfo(global::org.zhangqi.proto.BattleRoomInfo value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasBattleRoomInfo &&
            result.battleRoomInfo_ != global::org.zhangqi.proto.BattleRoomInfo.DefaultInstance) {
            result.battleRoomInfo_ = global::org.zhangqi.proto.BattleRoomInfo.CreateBuilder(result.battleRoomInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.battleRoomInfo_ = value;
        }
        result.hasBattleRoomInfo = true;
        return this;
      }
      public Builder ClearBattleRoomInfo() {
        PrepareBuilder();
        result.hasBattleRoomInfo = false;
        result.battleRoomInfo_ = null;
        return this;
      }
    }
    static NoticeBattleServerCreateNewBattleResponse() {
      object.ReferenceEquals(global::org.zhangqi.proto.RemoteServer.Descriptor, null);
    }
  }
  
  public sealed partial class GatewayNoticeClientOfflinePush : pb::GeneratedMessageLite<GatewayNoticeClientOfflinePush, GatewayNoticeClientOfflinePush.Builder> {
    private GatewayNoticeClientOfflinePush() { }
    private static readonly GatewayNoticeClientOfflinePush defaultInstance = new GatewayNoticeClientOfflinePush().MakeReadOnly();
    private static readonly string[] _gatewayNoticeClientOfflinePushFieldNames = new string[] { "isUserOffline", "sessionId", "userId" };
    private static readonly uint[] _gatewayNoticeClientOfflinePushFieldTags = new uint[] { 24, 8, 16 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GatewayNoticeClientOfflinePush DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override GatewayNoticeClientOfflinePush DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GatewayNoticeClientOfflinePush ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int SessionIdFieldNumber = 1;
    private bool hasSessionId;
    private int sessionId_;
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public int SessionId {
      get { return sessionId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int UserIdFieldNumber = 2;
    private bool hasUserId;
    private int userId_;
    public bool HasUserId {
      get { return hasUserId; }
    }
    public int UserId {
      get { return userId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int IsUserOfflineFieldNumber = 3;
    private bool hasIsUserOffline;
    private bool isUserOffline_;
    public bool HasIsUserOffline {
      get { return hasIsUserOffline; }
    }
    public bool IsUserOffline {
      get { return isUserOffline_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _gatewayNoticeClientOfflinePushFieldNames;
      if (hasSessionId) {
        output.WriteInt32(1, field_names[1], SessionId);
      }
      if (hasUserId) {
        output.WriteInt32(2, field_names[2], UserId);
      }
      if (hasIsUserOffline) {
        output.WriteBool(3, field_names[0], IsUserOffline);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSessionId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, SessionId);
        }
        if (hasUserId) {
          size += pb::CodedOutputStream.ComputeInt32Size(2, UserId);
        }
        if (hasIsUserOffline) {
          size += pb::CodedOutputStream.ComputeBoolSize(3, IsUserOffline);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasSessionId) hash ^= sessionId_.GetHashCode();
      if (hasUserId) hash ^= userId_.GetHashCode();
      if (hasIsUserOffline) hash ^= isUserOffline_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      GatewayNoticeClientOfflinePush other = obj as GatewayNoticeClientOfflinePush;
      if (other == null) return false;
      if (hasSessionId != other.hasSessionId || (hasSessionId && !sessionId_.Equals(other.sessionId_))) return false;
      if (hasUserId != other.hasUserId || (hasUserId && !userId_.Equals(other.userId_))) return false;
      if (hasIsUserOffline != other.hasIsUserOffline || (hasIsUserOffline && !isUserOffline_.Equals(other.isUserOffline_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GatewayNoticeClientOfflinePush ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GatewayNoticeClientOfflinePush ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GatewayNoticeClientOfflinePush ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GatewayNoticeClientOfflinePush ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GatewayNoticeClientOfflinePush ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GatewayNoticeClientOfflinePush ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GatewayNoticeClientOfflinePush ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GatewayNoticeClientOfflinePush ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GatewayNoticeClientOfflinePush ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static GatewayNoticeClientOfflinePush ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GatewayNoticeClientOfflinePush MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(GatewayNoticeClientOfflinePush prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<GatewayNoticeClientOfflinePush, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GatewayNoticeClientOfflinePush cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GatewayNoticeClientOfflinePush result;
      
      private GatewayNoticeClientOfflinePush PrepareBuilder() {
        if (resultIsReadOnly) {
          GatewayNoticeClientOfflinePush original = result;
          result = new GatewayNoticeClientOfflinePush();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GatewayNoticeClientOfflinePush MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override GatewayNoticeClientOfflinePush DefaultInstanceForType {
        get { return global::org.zhangqi.proto.GatewayNoticeClientOfflinePush.DefaultInstance; }
      }
      
      public override GatewayNoticeClientOfflinePush BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is GatewayNoticeClientOfflinePush) {
          return MergeFrom((GatewayNoticeClientOfflinePush) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GatewayNoticeClientOfflinePush other) {
        if (other == global::org.zhangqi.proto.GatewayNoticeClientOfflinePush.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasIsUserOffline) {
          IsUserOffline = other.IsUserOffline;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gatewayNoticeClientOfflinePushFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gatewayNoticeClientOfflinePushFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSessionId = input.ReadInt32(ref result.sessionId_);
              break;
            }
            case 16: {
              result.hasUserId = input.ReadInt32(ref result.userId_);
              break;
            }
            case 24: {
              result.hasIsUserOffline = input.ReadBool(ref result.isUserOffline_);
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasSessionId {
        get { return result.hasSessionId; }
      }
      public int SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(int value) {
        PrepareBuilder();
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        PrepareBuilder();
        result.hasSessionId = false;
        result.sessionId_ = 0;
        return this;
      }
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public int UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(int value) {
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = 0;
        return this;
      }
      
      public bool HasIsUserOffline {
        get { return result.hasIsUserOffline; }
      }
      public bool IsUserOffline {
        get { return result.IsUserOffline; }
        set { SetIsUserOffline(value); }
      }
      public Builder SetIsUserOffline(bool value) {
        PrepareBuilder();
        result.hasIsUserOffline = true;
        result.isUserOffline_ = value;
        return this;
      }
      public Builder ClearIsUserOffline() {
        PrepareBuilder();
        result.hasIsUserOffline = false;
        result.isUserOffline_ = false;
        return this;
      }
    }
    static GatewayNoticeClientOfflinePush() {
      object.ReferenceEquals(global::org.zhangqi.proto.RemoteServer.Descriptor, null);
    }
  }
  
  public sealed partial class LogicServerNoticeGatewayForceOfflineClientPush : pb::GeneratedMessageLite<LogicServerNoticeGatewayForceOfflineClientPush, LogicServerNoticeGatewayForceOfflineClientPush.Builder> {
    private LogicServerNoticeGatewayForceOfflineClientPush() { }
    private static readonly LogicServerNoticeGatewayForceOfflineClientPush defaultInstance = new LogicServerNoticeGatewayForceOfflineClientPush().MakeReadOnly();
    private static readonly string[] _logicServerNoticeGatewayForceOfflineClientPushFieldNames = new string[] { "forceOfflineReason", "sessionId" };
    private static readonly uint[] _logicServerNoticeGatewayForceOfflineClientPushFieldTags = new uint[] { 16, 8 };
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static LogicServerNoticeGatewayForceOfflineClientPush DefaultInstance {
      get { return defaultInstance; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override LogicServerNoticeGatewayForceOfflineClientPush DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override LogicServerNoticeGatewayForceOfflineClientPush ThisMessage {
      get { return this; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int SessionIdFieldNumber = 1;
    private bool hasSessionId;
    private int sessionId_;
    public bool HasSessionId {
      get { return hasSessionId; }
    }
    public int SessionId {
      get { return sessionId_; }
    }
    
    #if UNITY_EDITOR
    [pb.FieldNumber]
    #endif//
    public const int ForceOfflineReasonFieldNumber = 2;
    private bool hasForceOfflineReason;
    private global::org.zhangqi.proto.ForceOfflineReasonEnum forceOfflineReason_ = global::org.zhangqi.proto.ForceOfflineReasonEnum.ForceOfflineServerNotAvailable;
    public bool HasForceOfflineReason {
      get { return hasForceOfflineReason; }
    }
    public global::org.zhangqi.proto.ForceOfflineReasonEnum ForceOfflineReason {
      get { return forceOfflineReason_; }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override void WriteTo(pb::ICodedOutputStream output) {
      int size = SerializedSize;
      string[] field_names = _logicServerNoticeGatewayForceOfflineClientPushFieldNames;
      if (hasSessionId) {
        output.WriteInt32(1, field_names[1], SessionId);
      }
      if (hasForceOfflineReason) {
        output.WriteEnum(2, field_names[0], (int) ForceOfflineReason, ForceOfflineReason);
      }
    }
    
    private int memoizedSerializedSize = -1;
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        
        size = 0;
        if (hasSessionId) {
          size += pb::CodedOutputStream.ComputeInt32Size(1, SessionId);
        }
        if (hasForceOfflineReason) {
          size += pb::CodedOutputStream.ComputeEnumSize(2, (int) ForceOfflineReason);
        }
        memoizedSerializedSize = size;
        return size;
      }
    }
    
    #region Lite runtime methods
    public override int GetHashCode() {
      int hash = GetType().GetHashCode();
      if (hasSessionId) hash ^= sessionId_.GetHashCode();
      if (hasForceOfflineReason) hash ^= forceOfflineReason_.GetHashCode();
      return hash;
    }
    
    public override bool Equals(object obj) {
      LogicServerNoticeGatewayForceOfflineClientPush other = obj as LogicServerNoticeGatewayForceOfflineClientPush;
      if (other == null) return false;
      if (hasSessionId != other.hasSessionId || (hasSessionId && !sessionId_.Equals(other.sessionId_))) return false;
      if (hasForceOfflineReason != other.hasForceOfflineReason || (hasForceOfflineReason && !forceOfflineReason_.Equals(other.forceOfflineReason_))) return false;
      return true;
    }
    
    #endregion
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static LogicServerNoticeGatewayForceOfflineClientPush ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static LogicServerNoticeGatewayForceOfflineClientPush ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static LogicServerNoticeGatewayForceOfflineClientPush ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static LogicServerNoticeGatewayForceOfflineClientPush ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static LogicServerNoticeGatewayForceOfflineClientPush ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static LogicServerNoticeGatewayForceOfflineClientPush ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static LogicServerNoticeGatewayForceOfflineClientPush ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static LogicServerNoticeGatewayForceOfflineClientPush ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static LogicServerNoticeGatewayForceOfflineClientPush ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static LogicServerNoticeGatewayForceOfflineClientPush ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private LogicServerNoticeGatewayForceOfflineClientPush MakeReadOnly() {
      return this;
    }
    
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder ToBuilder() { return CreateBuilder(this); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public override Builder CreateBuilderForType() { return new Builder(); }
    #if UNITY_EDITOR
     [pb.FieldNumber] 
     #endif//
    public static Builder CreateBuilder(LogicServerNoticeGatewayForceOfflineClientPush prototype) {
      return new Builder(prototype);
    }
    
    public sealed partial class Builder : pb::GeneratedBuilderLite<LogicServerNoticeGatewayForceOfflineClientPush, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(LogicServerNoticeGatewayForceOfflineClientPush cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private LogicServerNoticeGatewayForceOfflineClientPush result;
      
      private LogicServerNoticeGatewayForceOfflineClientPush PrepareBuilder() {
        if (resultIsReadOnly) {
          LogicServerNoticeGatewayForceOfflineClientPush original = result;
          result = new LogicServerNoticeGatewayForceOfflineClientPush();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override LogicServerNoticeGatewayForceOfflineClientPush MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override LogicServerNoticeGatewayForceOfflineClientPush DefaultInstanceForType {
        get { return global::org.zhangqi.proto.LogicServerNoticeGatewayForceOfflineClientPush.DefaultInstance; }
      }
      
      public override LogicServerNoticeGatewayForceOfflineClientPush BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessageLite other) {
        if (other is LogicServerNoticeGatewayForceOfflineClientPush) {
          return MergeFrom((LogicServerNoticeGatewayForceOfflineClientPush) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(LogicServerNoticeGatewayForceOfflineClientPush other) {
        if (other == global::org.zhangqi.proto.LogicServerNoticeGatewayForceOfflineClientPush.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasSessionId) {
          SessionId = other.SessionId;
        }
        if (other.HasForceOfflineReason) {
          ForceOfflineReason = other.ForceOfflineReason;
        }
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_logicServerNoticeGatewayForceOfflineClientPushFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _logicServerNoticeGatewayForceOfflineClientPushFieldTags[field_ordinal];
            else {
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                return this;
              }
              ParseUnknownField(input, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasSessionId = input.ReadInt32(ref result.sessionId_);
              break;
            }
            case 16: {
              int number = 0;
              string str = null;
              if(input.ReadEnum(ref number, ref str)) {
                try {
                  if (str != null) {
                    result.forceOfflineReason_ = (global::org.zhangqi.proto.ForceOfflineReasonEnum)System.Enum.Parse(typeof(global::org.zhangqi.proto.ForceOfflineReasonEnum), str);
                  } else {
                    result.forceOfflineReason_ = (global::org.zhangqi.proto.ForceOfflineReasonEnum)number;
                  }
                  result.hasForceOfflineReason = true;
                }
                catch {
                }
              }
              break;
            }
          }
        }
        
        return this;
      }
      
      
      public bool HasSessionId {
        get { return result.hasSessionId; }
      }
      public int SessionId {
        get { return result.SessionId; }
        set { SetSessionId(value); }
      }
      public Builder SetSessionId(int value) {
        PrepareBuilder();
        result.hasSessionId = true;
        result.sessionId_ = value;
        return this;
      }
      public Builder ClearSessionId() {
        PrepareBuilder();
        result.hasSessionId = false;
        result.sessionId_ = 0;
        return this;
      }
      
      public bool HasForceOfflineReason {
       get { return result.hasForceOfflineReason; }
      }
      public global::org.zhangqi.proto.ForceOfflineReasonEnum ForceOfflineReason {
        get { return result.ForceOfflineReason; }
        set { SetForceOfflineReason(value); }
      }
      public Builder SetForceOfflineReason(global::org.zhangqi.proto.ForceOfflineReasonEnum value) {
        PrepareBuilder();
        result.hasForceOfflineReason = true;
        result.forceOfflineReason_ = value;
        return this;
      }
      public Builder ClearForceOfflineReason() {
        PrepareBuilder();
        result.hasForceOfflineReason = false;
        result.forceOfflineReason_ = global::org.zhangqi.proto.ForceOfflineReasonEnum.ForceOfflineServerNotAvailable;
        return this;
      }
    }
    static LogicServerNoticeGatewayForceOfflineClientPush() {
      object.ReferenceEquals(global::org.zhangqi.proto.RemoteServer.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
#pragma warning restore
